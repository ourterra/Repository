export declare type StateChart<State extends string, Event extends string, Context> = {
    initial: State;
    context: Context;
    states: Record<State, StateDefinition<State, Event, Context>>;
};
declare type StateDefinition<State, Event extends string, Context> = {
    onEnterState?: (transitionFn: TransitionFn<Event, Context>) => void;
    onLeaveState?: (transitionFn: TransitionFn<Event, Context>) => void;
    on?: {
        [index in Event]?: State;
    };
};
export declare type TransitionFn<Event, Context> = (event: Event, context?: Context) => void;
export declare function createStateMachine<State extends string, Event extends string, Context>(stateChart: StateChart<State, Event, Context>, { debug, warnOnUnknownTransitions }?: {
    debug?: boolean | undefined;
    warnOnUnknownTransitions?: boolean | undefined;
}): {
    subscribe: (callback: (state: State, context: Context) => void) => () => void;
    transition: TransitionFn<Event, Context>;
    getState: () => State;
    getContext: () => Context;
};
export {};
