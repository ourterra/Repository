export declare const SIDE_OPTIONS: readonly ["top", "right", "bottom", "left"];
export declare const ALIGN_OPTIONS: readonly ["start", "center", "end"];
export declare type Axis = 'x' | 'y';
export declare type Side = typeof SIDE_OPTIONS[number];
export declare type Align = typeof ALIGN_OPTIONS[number];
export declare type Point = {
    x: number;
    y: number;
};
export declare type Size = {
    width: number;
    height: number;
};
/**
 * Creates a rect (`ClientRect`) based on a Size and and a position (x, y).
 * This is useful to compute the rect of an element without having to actually move it.
 */
export declare function makeRect({ width, height }: Size, { x, y }: Point): ClientRect;
/**
 * Gets the rect (`ClientRect`) of an element and rounds all values.
 */
export declare function getRoundedRect(element: HTMLElement): ClientRect;
/**
 * Gets the opposite side of a given side (ie. top => bottom, left => right, â€¦)
 */
export declare function getOppositeSide(side: Side): Side;
/**
 * Returns whether 2 rects are equal in values
 */
export declare function rectEquals(rect1: ClientRect, rect2: ClientRect): boolean;
