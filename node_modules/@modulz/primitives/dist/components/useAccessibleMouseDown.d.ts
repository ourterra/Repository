import React from 'react';
declare type UseAccessibleMouseDownOptions<T extends HTMLElement> = {
    /** Whether the target is currently disabled or not */
    isDisabled?: boolean;
    /** The original onMouseDown to compose */
    onMouseDown?: React.MouseEventHandler<T>;
    /** The original onKeyDown to compose */
    onKeyDown?: React.KeyboardEventHandler<T>;
};
/**
 * This hook can be used to create an accessible mouse down handler
 * which retains keyboard accessibility (that you normally get with click events).
 */
export declare function useAccessibleMouseDown<T extends HTMLElement>(handler: React.MouseEventHandler<T>, { isDisabled, onMouseDown: originalOnMouseDown, onKeyDown: originalOnKeyDown }: UseAccessibleMouseDownOptions<T>): {
    onMouseDown: (event: React.MouseEvent<T, MouseEvent>) => void;
    onKeyDown: (event: React.KeyboardEvent<T>) => void;
};
export {};
