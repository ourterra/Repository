import React from 'react';
import { BoxSystemProps } from './Box';
import { Point } from '../utils/geometry';
import { Item } from '../utils/selectableItems';
import { CalculateMenuPositionOptions, MenuPosition } from './menuPosition';
import { StyleConfig } from '../utils/styleConfig';
export declare type MenuParts = {
    menu: '';
    scrollIndicator: 'hover';
    item: 'highlighted' | 'grouped' | 'disabled';
    itemIcon: '';
    label: '';
    separator: '';
};
declare type MenuDOMProps = React.ComponentPropsWithRef<'div'>;
declare type MenuStyleProp = {
    styleConfig?: StyleConfig<MenuParts>;
};
declare type MenuSystemProps = BoxSystemProps;
declare type MenuOwnProps = {
    id?: string;
    role?: 'menu' | 'listbox';
    buttonRef?: React.RefObject<HTMLButtonElement>;
    buttonTextRef?: React.RefObject<HTMLSpanElement>;
    anchorPoint?: Point;
    isOpen?: boolean;
    onClose?: () => void;
    refToFocusOnClose?: React.RefObject<HTMLElement>;
    highlightedIndex?: number;
    onHighlightedIndexChange?: (index?: number) => void;
    defaultHighlightedIndex?: number;
    onItemSelected?: (item: Item) => void;
    calculateMenuPosition?: (options: CalculateMenuPositionOptions) => MenuPosition | undefined;
};
export declare type MenuProps = MenuDOMProps & MenuStyleProp & MenuSystemProps & MenuOwnProps & {
    as?: React.ElementType<any>;
};
export declare const Menu: React.ForwardRefExoticComponent<Pick<MenuProps, "p" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "styleConfig" | "m" | "margin" | "mt" | "marginTop" | "mr" | "marginRight" | "mb" | "marginBottom" | "ml" | "marginLeft" | "mx" | "marginX" | "my" | "marginY" | "padding" | "pt" | "paddingTop" | "pr" | "paddingRight" | "pb" | "paddingBottom" | "pl" | "paddingLeft" | "px" | "paddingX" | "py" | "paddingY" | "sx" | "theme" | "buttonRef" | "buttonTextRef" | "anchorPoint" | "isOpen" | "onClose" | "refToFocusOnClose" | "highlightedIndex" | "onHighlightedIndexChange" | "defaultHighlightedIndex" | "onItemSelected" | "calculateMenuPosition" | "as"> & React.RefAttributes<HTMLDivElement>>;
export declare type MenuItemProps = {
    ref?: React.RefObject<HTMLDivElement>;
    label: string;
    value?: string;
    disabled?: boolean;
    grouped?: boolean;
    selected?: boolean;
    onSelect?: () => void;
    role?: 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'option';
    index?: number;
    isReference?: boolean;
};
export declare const MenuItem: React.ForwardRefExoticComponent<Pick<MenuItemProps, "grouped" | "disabled" | "label" | "role" | "onSelect" | "value" | "selected" | "index" | "isReference"> & React.RefAttributes<HTMLDivElement>>;
export declare type MenuItemCheckboxProps = Omit<MenuItemProps, 'grouped' | 'selected' | 'onSelect' | 'role'> & {
    checked?: boolean;
    onChange?: (checked?: boolean) => void;
    defaultChecked?: boolean;
};
export declare const MenuItemCheckbox: React.ForwardRefExoticComponent<Pick<MenuItemCheckboxProps, "disabled" | "label" | "defaultChecked" | "onChange" | "value" | "index" | "isReference" | "checked"> & React.RefAttributes<HTMLDivElement>>;
export declare type MenuItemRadioGroupProps = {
    children: React.ReactNode;
    value?: string;
    onChange?: (value?: string) => void;
    defaultValue?: string;
};
export declare function MenuItemRadioGroup({ children, value: valueProp, onChange, defaultValue, }: MenuItemRadioGroupProps): any;
export declare type MenuItemRadioProps = Omit<MenuItemProps, 'grouped' | 'selected' | 'onSelect' | 'role'>;
export declare const MenuItemRadio: React.ForwardRefExoticComponent<Pick<Pick<MenuItemProps, "disabled" | "ref" | "label" | "value" | "index" | "isReference">, "disabled" | "label" | "value" | "index" | "isReference"> & React.RefAttributes<HTMLDivElement>>;
export declare type MenuItemLabelProps = {
    children: string;
};
export declare function MenuItemLabel({ children }: MenuItemLabelProps): JSX.Element;
export declare type MenuItemSeparatorProps = {};
export declare function MenuItemSeparator(props: MenuItemSeparatorProps): JSX.Element;
export {};
