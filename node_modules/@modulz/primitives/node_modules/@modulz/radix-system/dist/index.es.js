import { system, get, createParser } from '@styled-system/core';
export { compose, createParser, get, system } from '@styled-system/core';
import css from '@styled-system/css';

var config = {
    fontSize: {
        property: 'fontSize',
        scale: 'fontSizes',
    },
};
var fontSize = system(config);

var config$1 = { fontStyle: true };
var fontStyle = system(config$1);

var config$2 = {
    fontFamily: {
        property: 'fontFamily',
        scale: 'fonts',
    },
};
var fontFamily = system(config$2);

var config$3 = {
    fontWeight: {
        property: 'fontWeight',
        scale: 'fontWeights',
    },
};
var fontWeight = system(config$3);

var config$4 = {
    fill: {
        property: 'fill',
        scale: 'colors',
    },
};
var fill = system(config$4);

var config$5 = {
    lineHeight: {
        property: 'lineHeight',
        scale: 'lineHeights',
    },
};
var lineHeight = system(config$5);

var config$6 = { textAlign: true };
var textAlign = system(config$6);

var config$7 = { display: true };
var display = system(config$7);

var config$8 = {
    height: {
        property: 'height',
        scale: 'sizes',
    },
};
var height = system(config$8);

var config$9 = {
    maxWidth: {
        property: 'maxWidth',
        scale: 'sizes',
    },
};
var maxWidth = system(config$9);

var config$a = {
    maxHeight: {
        property: 'maxHeight',
        scale: 'sizes',
    },
};
var maxHeight = system(config$a);

var config$b = {
    minHeight: {
        property: 'minHeight',
        scale: 'sizes',
    },
};
var minHeight = system(config$b);

var config$c = {
    minWidth: {
        property: 'minWidth',
        scale: 'sizes',
    },
};
var minWidth = system(config$c);

var config$d = {
    width: {
        property: 'width',
        scale: 'sizes',
    },
};
var width = system(config$d);

var config$e = { overflow: true };
var overflow = system(config$e);

var config$f = {
    border: {
        property: 'border',
        scale: 'borders',
    },
    borderWidth: {
        property: 'borderWidth',
        scale: 'borderWidths',
    },
    borderStyle: {
        property: 'borderStyle',
        scale: 'borderStyles',
    },
    borderColor: {
        property: 'borderColor',
        scale: 'colors',
    },
    borderTop: {
        property: 'borderTop',
        scale: 'borders',
    },
    borderRight: {
        property: 'borderRight',
        scale: 'borders',
    },
    borderBottom: {
        property: 'borderBottom',
        scale: 'borders',
    },
    borderLeft: {
        property: 'borderLeft',
        scale: 'borders',
    },
    borderX: {
        properties: ['borderLeft', 'borderRight'],
        scale: 'borders',
    },
    borderY: {
        properties: ['borderTop', 'borderBottom'],
        scale: 'borders',
    },
};
var border = system(config$f);

var config$g = {
    borderRadius: {
        property: 'borderRadius',
        scale: 'radii',
    },
    borderTopLeftRadius: {
        property: 'borderTopLeftRadius',
        scale: 'radii',
    },
    borderTopRightRadius: {
        property: 'borderTopRightRadius',
        scale: 'radii',
    },
    borderBottomLeftRadius: {
        property: 'borderBottomLeftRadius',
        scale: 'radii',
    },
    borderBottomRightRadius: {
        property: 'borderBottomRightRadius',
        scale: 'radii',
    },
};
var borderRadius = system(config$g);

var config$h = {
    boxShadow: {
        property: 'boxShadow',
        scale: 'shadows',
    },
};
var boxShadow = system(config$h);

var config$i = {
    opacity: true,
};
var opacity = system(config$i);

var config$j = {
    backgroundColor: {
        property: 'backgroundColor',
        scale: 'colors',
    },
};
config$j.bg = config$j.backgroundColor;
var backgroundColor = system(config$j);

var config$k = {
    textColor: {
        property: 'color',
        scale: 'colors',
    },
};
var textColor = system(config$k);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var isNumber = function (n) { return typeof n === 'number' && !isNaN(n); };
var getNegativeSpace = function (n, scale) {
    if (!isNumber(n)) {
        return get(scale, n, n);
    }
    var isNegative = n < 0;
    var absolute = Math.abs(n);
    var value = get(scale, absolute, absolute);
    if (!isNumber(value)) {
        return isNegative ? '-' + value : value;
    }
    return value * (isNegative ? -1 : 1);
};

var config$l = {
    margin: {
        property: 'margin',
        scale: 'space',
        transform: getNegativeSpace,
    },
    marginTop: {
        property: 'marginTop',
        scale: 'space',
        transform: getNegativeSpace,
    },
    marginRight: {
        property: 'marginRight',
        scale: 'space',
        transform: getNegativeSpace,
    },
    marginBottom: {
        property: 'marginBottom',
        scale: 'space',
        transform: getNegativeSpace,
    },
    marginLeft: {
        property: 'marginLeft',
        scale: 'space',
        transform: getNegativeSpace,
    },
    marginX: {
        properties: ['marginLeft', 'marginRight'],
        scale: 'space',
        transform: getNegativeSpace,
    },
    marginY: {
        properties: ['marginTop', 'marginBottom'],
        scale: 'space',
        transform: getNegativeSpace,
    },
};
config$l.m = config$l.margin;
config$l.mt = config$l.marginTop;
config$l.mr = config$l.marginRight;
config$l.mb = config$l.marginBottom;
config$l.ml = config$l.marginLeft;
config$l.mx = config$l.marginX;
config$l.my = config$l.marginY;
var margin = system(config$l);

var config$m = {
    padding: {
        property: 'padding',
        scale: 'space',
    },
    paddingTop: {
        property: 'paddingTop',
        scale: 'space',
    },
    paddingRight: {
        property: 'paddingRight',
        scale: 'space',
    },
    paddingBottom: {
        property: 'paddingBottom',
        scale: 'space',
    },
    paddingLeft: {
        property: 'paddingLeft',
        scale: 'space',
    },
    paddingX: {
        properties: ['paddingLeft', 'paddingRight'],
        scale: 'space',
    },
    paddingY: {
        properties: ['paddingTop', 'paddingBottom'],
        scale: 'space',
    },
};
config$m.p = config$m.padding;
config$m.pt = config$m.paddingTop;
config$m.pr = config$m.paddingRight;
config$m.pb = config$m.paddingBottom;
config$m.pl = config$m.paddingLeft;
config$m.px = config$m.paddingX;
config$m.py = config$m.paddingY;
var padding = system(config$m);

var spaceSet = system(__assign(__assign({}, config$l), config$m));

var config$n = { alignContent: true };
var alignContent = system(config$n);

var config$o = { alignItems: true };
var alignItems = system(config$o);

var config$p = { flexDirection: true };
var flexDirection = system(config$p);

var config$q = { flexWrap: true };
var flexWrap = system(config$q);

var config$r = { justifyContent: true };
var justifyContent = system(config$r);

var config$s = { justifyItems: true };
var justifyItems = system(config$s);

var flexContainerSet = system(__assign(__assign(__assign(__assign(__assign(__assign({}, config$n), config$o), config$p), config$q), config$r), config$s));

var config$t = { flex: true };
var flex = system(config$t);

var config$u = { flexGrow: true };
var flexGrow = system(config$u);

var config$v = { flexShrink: true };
var flexShrink = system(config$v);

var config$w = { flexBasis: true };
var flexBasis = system(config$w);

var config$x = { alignSelf: true };
var alignSelf = system(config$x);

var config$y = { justifySelf: true };
var justifySelf = system(config$y);

var config$z = { order: true };
var order = system(config$z);

var flexItemSet = system(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, config$t), config$u), config$v), config$w), config$x), config$y), config$z));

var config$A = { position: true };
var position = system(config$A);

var config$B = {
    zIndex: {
        property: 'zIndex',
        scale: 'zIndices',
    },
};
var zIndex = system(config$B);

var config$C = {
    top: {
        property: 'top',
        scale: 'space',
        transform: getNegativeSpace,
    },
};
var top = system(config$C);

var config$D = {
    right: {
        property: 'right',
        scale: 'space',
        transform: getNegativeSpace,
    },
};
var right = system(config$D);

var config$E = {
    bottom: {
        property: 'bottom',
        scale: 'space',
        transform: getNegativeSpace,
    },
};
var bottom = system(config$E);

var config$F = {
    left: {
        property: 'left',
        scale: 'space',
        transform: getNegativeSpace,
    },
};
var left = system(config$F);

var positionSet = system(__assign(__assign(__assign(__assign(__assign(__assign({}, config$A), config$B), config$C), config$D), config$E), config$F));

var config$G = {
    gridGap: {
        property: 'gridGap',
        scale: 'space',
    },
};
var gridGap = system(config$G);

var config$H = {
    gridColumnGap: {
        property: 'gridColumnGap',
        scale: 'space',
    },
};
var gridColumnGap = system(config$H);

var config$I = {
    gridRowGap: {
        property: 'gridRowGap',
        scale: 'space',
    },
};
var gridRowGap = system(config$I);

var config$J = { gridColumn: true };
var gridColumn = system(config$J);

var config$K = { gridRow: true };
var gridRow = system(config$K);

var config$L = { gridAutoFlow: true };
var gridAutoFlow = system(config$L);

var config$M = { gridAutoColumns: true };
var gridAutoColumns = system(config$M);

var config$N = { gridAutoRows: true };
var gridAutoRows = system(config$N);

var config$O = { gridTemplateColumns: true };
var gridTemplateColumns = system(config$O);

var config$P = { gridTemplateRows: true };
var gridTemplateRows = system(config$P);

var config$Q = { gridTemplateAreas: true };
var gridTemplateAreas = system(config$Q);

var config$R = { gridArea: true };
var gridArea = system(config$R);

var gridSet = system(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, config$G), config$H), config$I), config$J), config$K), config$L), config$M), config$N), config$O), config$P), config$Q), config$R));

var variant = function (config) { return function (props) {
    var _a;
    var prop = Object.keys(config)[0];
    // @ts-ignore
    var getValue = function (n, scale) { return get(scale, n); };
    getValue.defaults = config[prop];
    return css(createParser((_a = {},
        _a[prop] = getValue,
        _a))(props));
}; };

var sx = function (_a) {
    var sx = _a.sx, theme = _a.theme;
    return css(sx)(theme);
};

export { alignContent, alignItems, alignSelf, backgroundColor, border, borderRadius, bottom, boxShadow, display, fill, flex, flexBasis, flexContainerSet, flexDirection, flexGrow, flexItemSet, flexShrink, flexWrap, fontFamily, fontSize, fontStyle, fontWeight, gridArea, gridAutoColumns, gridAutoFlow, gridAutoRows, gridColumn, gridColumnGap, gridGap, gridRow, gridRowGap, gridSet, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, height, justifyContent, justifyItems, justifySelf, left, lineHeight, margin, maxHeight, maxWidth, minHeight, minWidth, opacity, order, overflow, padding, position, positionSet, right, spaceSet, sx, textAlign, textColor, top, variant, width, zIndex };
