import React, { useState } from 'react';
import styled, { createGlobalStyle, ThemeProvider, css as css$1, keyframes } from 'styled-components';
import css from '@styled-system/css';
import { Avatar as Avatar$1, Badge as Badge$1, Button as Button$1, Card as Card$1, CardLink as CardLink$1, Checkbox as Checkbox$1, Code as Code$1, Container as Container$1, Dialog as Dialog$1, Divider as Divider$1, Text as Text$1, Box, Input as Input$1, Link as Link$1, Menu as Menu$1, Pipe as Pipe$1, Popover as Popover$1, Radio as Radio$1, Select as Select$1, Slider as Slider$1, SliderInput, Switch as Switch$1, Table as Table$1, Textarea as Textarea$1, ToggleButton as ToggleButton$1, Tooltip as Tooltip$1 } from '@modulz/primitives';
export { AspectRatio, Box, Button as ChromelessButton, DropdownMenu, Flex, Grid, Image, Lock, MenuItem, MenuItemCheckbox, MenuItemLabel, MenuItemRadio, MenuItemRadioGroup, MenuItemSeparator, Option, OptionGroup, Portal, RightClickMenu, RightClickable, Tbody, Td, Tfoot, Th, Thead, Tr, VisuallyHidden, useDropdownMenu } from '@modulz/primitives';
import { transparentize } from 'polished';
import merge from 'lodash.merge';
import themeGet from '@styled-system/theme-get';
import { variant, spaceSet, sx } from '@modulz/radix-system';

var theme = {
    breakpoints: ['600px', '1000px', '1080px', '1760px'],
    fonts: {
        normal: '"Untitled Sans", UntitledSans, -apple-system, BlinkMacSystemFont, "Helvetica Neue", Arial, sans-serif',
        mono: '"SÃ¶hne Mono", RadixDuo, "Liberation Mono", Menlo, Consolas, monospace',
    },
    fontSizes: [
        '10px',
        '12px',
        '13px',
        '15px',
        '17px',
        '19px',
        '21px',
        '23px',
        '27px',
        '35px',
        '58px',
    ],
    space: ['0', '5px', '10px', '15px', '20px', '25px', '35px', '45px', '65px', '80px'],
    sizes: ['0', '5px', '10px', '15px', '20px', '25px', '35px', '45px', '65px', '80px'],
    lineHeights: ['15px', '20px', '25px', '30px', '35px', '40px', '45px', '50px', '55px', '60px'],
    radii: ['0', '3px', '5px', '10px'],
    colors: {
        black: 'hsl(0, 0%, 0%)',
        white: 'hsl(0, 0%, 100%)',
        gray100: 'hsl(210, 10%, 99%)',
        gray200: 'hsl(210, 25%, 95%)',
        gray300: 'hsl(210, 15%, 90%)',
        gray400: 'hsl(210, 10%, 85%)',
        gray500: 'hsl(210, 10%, 75%)',
        gray600: 'hsl(210, 8%, 62%)',
        gray700: 'hsl(210, 7%, 43%)',
        gray800: 'hsl(210, 7%, 17%)',
        gray900: 'hsl(210, 5%, 9%)',
        blue100: 'hsl(208, 100%, 98%)',
        blue200: 'hsl(208, 100%, 95%)',
        blue300: 'hsl(208, 95%, 90%)',
        blue400: 'hsl(208, 94%, 81%)',
        blue500: 'hsl(208, 95%, 68%)',
        blue600: 'hsl(208, 98%, 50%)',
        blue700: 'hsl(208, 99%, 44%)',
        blue800: 'hsl(208, 98%, 14%)',
        blue900: 'hsl(208, 98%, 9%)',
        red100: 'hsl(348, 100%, 98%)',
        red200: 'hsl(356, 92%, 96%)',
        red300: 'hsl(357, 87%, 91%)',
        red400: 'hsl(358, 90%, 85%)',
        red500: 'hsl(358, 92%, 74%)',
        red600: 'hsl(350, 95%, 52%)',
        red700: 'hsl(348, 97%, 45%)',
        red800: 'hsl(345, 100%, 20%)',
        red900: 'hsl(338, 100%, 12%)',
        green100: 'hsl(150, 80%, 98%)',
        green200: 'hsl(143, 64%, 94%)',
        green300: 'hsl(144, 60%, 86%)',
        green400: 'hsl(145, 59%, 78%)',
        green500: 'hsl(148, 53%, 60%)',
        green600: 'hsl(148, 60%, 42%)',
        green700: 'hsl(150, 70%, 30%)',
        green800: 'hsl(149, 63%, 15%)',
        green900: 'hsl(144, 61%, 8%)',
        yellow100: 'hsl(42, 100%, 98%)',
        yellow200: 'hsl(42, 94%, 93%)',
        yellow300: 'hsl(45, 89%, 86%)',
        yellow400: 'hsl(50, 92%, 74%)',
        yellow500: 'hsl(51, 94%, 66%)',
        yellow600: 'hsl(52, 100%, 49%)',
        yellow700: 'hsl(35, 50%, 39%)',
        yellow800: 'hsl(35, 50%, 15%)',
        yellow900: 'hsl(32, 50%, 8%)',
    },
};
// Breakpoint aliases
// By adding the following aliases, repsonsive props
// can be used like so:
// <Text fontSize={{ small: 3, medium: 4, large: 5 }} />
theme.breakpoints.small = 0;
theme.breakpoints.medium = theme.breakpoints[0];
theme.breakpoints.large = theme.breakpoints[1];
theme.breakpoints.xlarge = theme.breakpoints[2];

var GlobalStyles = createGlobalStyle(css({
    '*': {
        boxSizing: 'border-box',
    },
    html: {
        color: 'gray800',
        fontFamily: 'normal',
        MozOsxFontSmoothing: 'grayscale',
        WebkitFontSmoothing: 'antialiased',
    },
    body: {
        margin: 0,
    },
}));

var RadixProvider = function (_a) {
    var _b = _a.theme, theme$1 = _b === void 0 ? theme : _b, children = _a.children;
    return (React.createElement(ThemeProvider, { theme: theme$1 },
        React.createElement(React.Fragment, null,
            React.createElement(GlobalStyles, null),
            children)));
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var Avatar = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Avatar$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            avatar: {
                normal: {
                    borderRadius: '100%',
                    color: 'white',
                    fontFamily: theme.fonts.normal,
                    fontWeight: 500,
                    textTransform: 'uppercase',
                },
            },
        },
        variants: {
            variant: {
                gray: {
                    avatar: {
                        normal: {
                            backgroundImage: "linear-gradient(" + theme.colors.gray600 + ", " + theme.colors.gray700 + ")",
                        },
                    },
                },
                black: {
                    avatar: {
                        normal: {
                            backgroundColor: theme.colors.gray800,
                        },
                    },
                },
            },
            size: {
                0: {
                    avatar: {
                        normal: {
                            fontSize: theme.fontSizes[2],
                            lineHeight: theme.lineHeights[2],
                            width: theme.sizes[5],
                            height: theme.sizes[5],
                        },
                    },
                },
                1: {
                    avatar: {
                        normal: {
                            fontSize: theme.fontSizes[5],
                            lineHeight: theme.lineHeights[4],
                            width: theme.sizes[6],
                            height: theme.sizes[6],
                        },
                    },
                },
            },
        },
    } }))); });
Avatar.defaultProps = {
    variant: 'gray',
    size: 0,
};

var Badge = React.forwardRef(function (props, forwardedRef) {
    return (React.createElement(Badge$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
            base: {
                badge: {
                    normal: {
                        fontFamily: theme.fonts.mono,
                        fontSize: theme.fontSizes[0],
                        lineHeight: theme.lineHeights[0],
                        wordSpacing: '-0.25em',
                        minWidth: theme.sizes[5],
                        paddingTop: 0,
                        paddingBottom: 0,
                        paddingLeft: '1.25ch',
                        paddingRight: '1.25ch',
                        border: 0,
                        borderRadius: 9999,
                    },
                },
            },
            variants: {
                variant: {
                    gray: {
                        badge: {
                            normal: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                                color: theme.colors.gray800,
                            },
                        },
                    },
                    blue: {
                        badge: {
                            normal: {
                                backgroundColor: theme.colors.blue100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.blue300,
                                color: theme.colors.blue700,
                            },
                        },
                    },
                    green: {
                        badge: {
                            normal: {
                                backgroundColor: theme.colors.green100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.green300,
                                color: theme.colors.green700,
                            },
                        },
                    },
                    red: {
                        badge: {
                            normal: {
                                backgroundColor: theme.colors.red100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.red300,
                                color: theme.colors.red700,
                            },
                        },
                    },
                    yellow: {
                        badge: {
                            normal: {
                                backgroundColor: theme.colors.yellow100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.yellow300,
                                color: theme.colors.yellow700,
                            },
                        },
                    },
                },
            },
        } })));
});
Badge.defaultProps = {
    variant: 'gray',
};

var Button = React.forwardRef(function (_a, forwardedRef) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(Button$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
            base: {
                button: {
                    normal: {
                        display: 'inline-flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontFamily: theme.fonts.normal,
                        fontVariantNumeric: 'tabular-nums',
                        fontWeight: 500,
                        textDecoration: 'none',
                        borderRadius: theme.radii[1],
                        cursor: 'default',
                        position: 'relative',
                        whiteSpace: 'nowrap',
                    },
                    disabled: {
                        backgroundColor: theme.colors.gray100,
                        boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                        color: theme.colors.gray500,
                        cursor: 'not-allowed',
                    },
                },
            },
            variants: {
                variant: {
                    gray: {
                        button: {
                            normal: {
                                backgroundColor: theme.colors.gray100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray400,
                                color: theme.colors.gray800,
                            },
                            hover: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray500,
                            },
                            active: {
                                backgroundColor: theme.colors.gray200,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray500,
                            },
                            focus: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray500 + ", 0 0 0 1px " + theme.colors.gray500,
                            },
                        },
                    },
                    blue: {
                        button: {
                            normal: {
                                backgroundColor: theme.colors.blue100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.blue400,
                                color: theme.colors.blue700,
                            },
                            hover: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.blue500,
                            },
                            active: {
                                backgroundColor: theme.colors.blue200,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.blue500,
                            },
                            focus: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.blue500 + ", 0 0 0 1px " + theme.colors.blue500,
                            },
                        },
                    },
                    green: {
                        button: {
                            normal: {
                                backgroundColor: theme.colors.green100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.green400,
                                color: theme.colors.green700,
                            },
                            hover: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.green500,
                            },
                            active: {
                                backgroundColor: theme.colors.green200,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.green500,
                            },
                            focus: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.green500 + ", 0 0 0 1px " + theme.colors.green500,
                            },
                        },
                    },
                    red: {
                        button: {
                            normal: {
                                backgroundColor: theme.colors.gray100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray400,
                                color: theme.colors.red700,
                            },
                            hover: {
                                backgroundColor: theme.colors.red100,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.red400,
                            },
                            active: {
                                backgroundColor: theme.colors.red200,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.red500,
                            },
                            focus: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.red500 + ", 0 0 0 1px " + theme.colors.red500,
                            },
                        },
                    },
                    ghost: {
                        button: {
                            normal: {
                                backgroundColor: 'transparent',
                                color: theme.colors.gray800,
                                mixBlendMode: 'multiply',
                            },
                            hover: {
                                backgroundColor: theme.colors.gray200,
                            },
                            active: {
                                backgroundColor: theme.colors.gray300,
                            },
                            focus: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray500 + ", 0 0 0 1px " + theme.colors.gray500,
                            },
                        },
                    },
                },
                size: {
                    0: {
                        button: {
                            normal: {
                                fontSize: theme.fontSizes[1],
                                paddingLeft: theme.space[2],
                                paddingRight: theme.space[2],
                                minWidth: theme.sizes[5],
                                lineHeight: theme.lineHeights[2],
                                letterSpacing: '-0.005em',
                            },
                        },
                    },
                    1: {
                        button: {
                            normal: {
                                fontSize: theme.fontSizes[2],
                                paddingLeft: theme.space[3],
                                paddingRight: theme.space[3],
                                minWidth: theme.sizes[6],
                                lineHeight: theme.lineHeights[4],
                                letterSpacing: '-0.008em',
                            },
                        },
                    },
                },
                isWaiting: {
                    true: {
                        button: {
                            normal: {
                                backgroundColor: theme.colors.gray200,
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                                color: 'transparent',
                                overflow: 'hidden',
                                pointerEvents: 'none',
                            },
                            focus: {
                                boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                            },
                        },
                    },
                },
            },
        } }),
        children,
        props.isWaiting && React.createElement(Waiting, { size: props.size })));
});
Button.defaultProps = {
    variant: 'gray',
    size: 0,
};
var waitingAnimation = function (props) { return keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  100% {\n    transform: translateX(", ");\n\t}\n"], ["\n  100% {\n    transform: translateX(", ");\n\t}\n"])), props.size === 1 ? theme.space[9] : theme.space[7]); };
var Waiting = styled('div')(function (props) {
    return css({
        position: 'absolute',
        top: 0,
        left: '-100%',
        width: '200%',
        height: '100%',
        backgroundImage: "linear-gradient(\n                -45deg,\n                transparent 33%,\n                rgba(0, 0, 0, 0.03) 33%,\n                rgba(0, 0, 0, 0.03) 66%,\n                transparent 66%\n              )",
        backgroundSize: props.size === 1
            ? theme.space[9] + " " + theme.space[6]
            : theme.space[7] + " " + theme.space[5],
    })(props);
}, function (props) { return css$1(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      animation: ", " 500ms linear infinite\n    "], ["\n      animation: ", " 500ms linear infinite\n    "])), waitingAnimation(props)); });
var templateObject_1, templateObject_2;

var cardStyleConfig = {
    base: {
        card: {
            normal: {
                backgroundColor: theme.colors.white,
                padding: theme.space[4],
                borderRadius: theme.radii[2],
                border: '1px solid transparent',
            },
        },
    },
    variants: {
        variant: {
            border: {
                card: {
                    normal: {
                        borderColor: theme.colors.gray300,
                    },
                },
            },
            shadow: {
                card: {
                    normal: __assign({}, createShadow(1)),
                },
            },
            ghost: {
                card: {
                    normal: __assign({}, createShadow(0)),
                },
            },
        },
    },
};
var Card = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Card$1, __assign({}, props, { ref: forwardedRef, styleConfig: cardStyleConfig }))); });
Card.defaultProps = {
    variant: 'border',
};
function createShadow(defaultOpacity) {
    return {
        position: 'relative',
        transition: 'opacity 80ms linear, transform 150ms ease',
        borderColor: 'transparent',
        '&::before': {
            content: "\"\"",
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            borderRadius: 'inherit',
            pointerEvents: 'none',
            transitionProperty: 'all',
            transitionDuration: '80ms',
            transitionTimingFunction: 'linear',
            boxShadow: "0 10px 38px -10px " + transparentize(0.65, theme.colors.gray900) + ",\n      0 10px 20px -15px " + transparentize(0.8, theme.colors.gray900),
            opacity: defaultOpacity,
        },
    };
}

var cardLinkStyleConfigOverrides = {
    base: {
        card: {
            normal: {},
            focus: {
                borderColor: theme.colors.blue500,
                boxShadow: "inset 0 0 0 1px " + theme.colors.blue500,
            },
        },
    },
    variants: {
        variant: {
            border: {
                card: {
                    normal: {},
                    hover: {
                        borderColor: theme.colors.gray500,
                    },
                },
            },
            shadow: {
                card: {
                    normal: {
                        willChange: 'transform',
                    },
                    hover: {
                        transform: 'translateY(-2px)',
                    },
                },
            },
            ghost: {
                card: {
                    normal: {
                        willChange: 'transform',
                    },
                    hover: {
                        transform: 'translateY(-2px)',
                        '&::before': {
                            opacity: 1,
                        },
                    },
                },
            },
        },
    },
};
var cardLinkStyleConfig = merge({}, cardStyleConfig, cardLinkStyleConfigOverrides);
var CardLink = React.forwardRef(function (props, forwardedRef) { return (React.createElement(CardLink$1, __assign({}, props, { ref: forwardedRef, styleConfig: cardLinkStyleConfig }))); });
CardLink.defaultProps = {
    variant: 'border',
};

var Checkbox = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Checkbox$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            checkbox: {
                normal: {
                    width: theme.sizes[4],
                    height: theme.sizes[4],
                    borderRadius: theme.radii[1],
                    border: 0,
                    boxShadow: "inset 0 0 0 1px " + theme.colors.gray400,
                },
                hover: {
                    boxShadow: "inset 0 0 0 1px " + theme.colors.gray500,
                },
                focus: {
                    boxShadow: "inset 0 0 0 1px " + theme.colors.blue500 + ", 0 0 0 1px " + theme.colors.blue500,
                },
                checked: {
                    backgroundColor: theme.colors.blue600,
                    boxShadow: 'none',
                },
                disabled: {
                    opacity: 0.5,
                },
            },
            icon: {
                normal: {
                    color: theme.colors.white,
                },
            },
        },
    } }))); });

var Code = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Code$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            code: {
                normal: {
                    borderRadius: '0.25em',
                    boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                    color: theme.colors.gray800,
                    fontFamily: theme.fonts.mono,
                    fontSize: 'max(12px, 85%)',
                    marginLeft: '0.1em',
                    marginRight: '0.1em',
                    paddingTop: '0.1em',
                    paddingBottom: '0.1em',
                    paddingLeft: '0.45em',
                    paddingRight: '0.45em',
                },
            },
        },
    } }))); });

var Container = React.forwardRef(function (props, forwadedRef) { return (React.createElement(Container$1, __assign({}, props, { ref: forwadedRef, styleConfig: {
        base: {
            container: {
                normal: {
                    paddingLeft: theme.space[5],
                    paddingRight: theme.space[5],
                    flex: 1,
                },
            },
        },
        variants: {
            size: {
                0: {
                    container: {
                        normal: {
                            maxWidth: 305,
                        },
                    },
                },
                1: {
                    container: {
                        normal: {
                            maxWidth: 585,
                        },
                    },
                },
                2: {
                    container: {
                        normal: {
                            maxWidth: 865,
                        },
                    },
                },
                3: {
                    container: {
                        normal: {
                            maxWidth: 1145,
                        },
                    },
                },
                4: {
                    container: {
                        normal: {
                            maxWidth: 'none',
                        },
                    },
                },
            },
        },
    } }))); });
Container.defaultProps = {
    size: 0,
};

var Dialog = function (props) { return (React.createElement(Dialog$1, __assign({}, props, { styleConfig: {
        base: {
            overlay: {
                normal: {
                    backgroundColor: 'hsla(0, 0%, 0%, 0.1)',
                },
            },
            wrapper: {
                normal: {
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                },
            },
            content: {
                normal: {
                    backgroundColor: theme.colors.white,
                    borderRadius: theme.radii[2],
                    boxShadow: '0 10px 38px -10px hsla(208, 24%, 7%, 0.35), 0 10px 20px -15px hsla(208, 24%, 7%, 0.2)',
                    width: 'auto',
                    maxWidth: 'fit-content',
                    minWidth: 200,
                    maxHeight: '85vh',
                    margin: '5vh auto 10vh',
                    overflow: 'auto',
                },
            },
        },
    } }))); };

var Divider = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Divider$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            divider: {
                normal: {
                    height: 1,
                    backgroundColor: theme.colors.gray300,
                },
            },
        },
        variants: {
            size: {
                0: {
                    divider: {
                        normal: {
                            maxWidth: theme.sizes[3],
                        },
                    },
                },
                1: {
                    divider: {
                        normal: {
                            maxWidth: theme.sizes[6],
                        },
                    },
                },
                2: {
                    divider: {
                        normal: {
                            maxWidth: theme.sizes[9],
                        },
                    },
                },
            },
        },
    } }))); });

var IconButton = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Button$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            button: {
                normal: {
                    borderRadius: 9999,
                    color: theme.colors.gray800,
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    flexShrink: 0,
                    mixBlendMode: 'multiply',
                    padding: theme.space[1],
                    verticalAlign: 'middle',
                },
                hover: {
                    backgroundColor: theme.colors.gray200,
                    boxShadow: "0 0 0 1px " + theme.colors.gray200,
                },
                active: {
                    backgroundColor: theme.colors.gray300,
                    boxShadow: "0 0 0 1px " + theme.colors.gray300,
                },
                disabled: {
                    color: theme.colors.gray600,
                    cursor: 'not-allowed',
                },
                focus: {
                    boxShadow: "0 0 0 2px " + theme.colors.gray500,
                },
            },
        },
        variants: {
            isActive: {
                true: {
                    button: {
                        normal: {
                            backgroundColor: theme.colors.gray200,
                            boxShadow: "0 0 0 1px " + theme.colors.gray200,
                        },
                        hover: {
                            backgroundColor: theme.colors.gray200,
                            boxShadow: "0 0 0 1px " + theme.colors.gray200,
                        },
                        active: {
                            backgroundColor: theme.colors.gray300,
                            boxShadow: "0 0 0 1px " + theme.colors.gray300,
                        },
                        focus: {
                            boxShadow: "0 0 0 2px " + theme.colors.gray500,
                        },
                    },
                },
            },
        },
    } }))); });

var Heading = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Text$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            text: {
                normal: {
                    fontFamily: theme.fonts.normal,
                    fontWeight: 500,
                    color: theme.colors.gray800,
                },
            },
        },
        variants: {
            weight: {
                normal: {
                    text: {
                        normal: {
                            fontWeight: 400,
                        },
                    },
                },
                medium: {
                    text: {
                        normal: {
                            fontWeight: 500,
                        },
                    },
                },
            },
            size: {
                0: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[3],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.005em',
                            textIndent: '-0.0025em',
                        },
                    },
                },
                1: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[5],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.008em',
                            textIndent: '-0.004em',
                        },
                    },
                },
                2: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[7],
                            lineHeight: theme.lineHeights[3],
                            letterSpacing: '-0.013em',
                            textIndent: '-0.00625em',
                        },
                    },
                },
                3: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[8],
                            lineHeight: theme.lineHeights[4],
                            letterSpacing: '-0.021em',
                            textIndent: '-0.0105em',
                        },
                    },
                },
                4: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[9],
                            lineHeight: theme.lineHeights[5],
                            letterSpacing: '-0.034em',
                            textIndent: '-0.017em',
                        },
                    },
                },
                5: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[10],
                            lineHeight: theme.lineHeights[9],
                            letterSpacing: '-0.055em',
                            textIndent: '-0.0275em',
                        },
                    },
                },
            },
            truncate: {
                true: {
                    text: {
                        normal: {
                            whiteSpace: 'nowrap',
                            textOverflow: 'ellipsis',
                            overflow: 'hidden',
                        },
                    },
                },
            },
        },
    } }))); });
Heading.defaultProps = {
    as: 'h1',
    truncate: false,
    size: 2,
    weight: 'medium',
};

var Hover = function (_a) {
    var _b = _a.as, Component = _b === void 0 ? Box : _b, children = _a.children, props = __rest(_a, ["as", "children"]);
    var _c = useState(false), isHovered = _c[0], setIsHovered = _c[1];
    return (React.createElement(Component, __assign({}, props, { onMouseMove: function () { return setIsHovered(true); }, onMouseLeave: function () { return setIsHovered(false); } }), children(isHovered)));
};

var Input = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Input$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            input: {
                normal: {
                    color: theme.colors.gray800,
                    fontFamily: theme.fonts.normal,
                    fontVariantNumeric: 'tabular-nums',
                    borderRadius: theme.radii[1],
                },
                readOnly: {
                    color: theme.colors.gray700,
                },
                disabled: {
                    backgroundColor: theme.colors.gray100,
                    color: theme.colors.gray500,
                    cursor: 'not-allowed',
                },
                focus: {
                    boxShadow: "inset 0 0 0 1px " + theme.colors.blue500 + ", 0 0 0 1px " + theme.colors.blue500,
                    cursor: 'text',
                },
            },
            placeholder: {
                normal: {
                    color: theme.colors.gray600,
                },
            },
        },
        variants: {
            variant: {
                normal: {
                    input: {
                        normal: {
                            boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                        },
                    },
                },
            },
            size: {
                0: {
                    input: {
                        normal: {
                            fontSize: theme.fontSizes[1],
                            letterSpacing: '-0.001em',
                            height: theme.sizes[5],
                            lineHeight: theme.lineHeights[0],
                            paddingLeft: theme.space[1],
                            paddingRight: theme.space[1],
                        },
                    },
                },
                1: {
                    input: {
                        normal: {
                            fontSize: theme.fontSizes[2],
                            letterSpacing: '-0.002em',
                            height: theme.sizes[6],
                            lineHeight: theme.lineHeights[0],
                            paddingLeft: theme.space[2],
                            paddingRight: theme.space[2],
                            // A workaround for a tiny visual bug in Chrome
                            //
                            // When input is positioned ambiguously â imagine it's vertically centered on the screen
                            // so its position seems to be calculated with subpixel-level precision â there is a schism
                            // between how the actual input âboxâ is placed and how its text baseline is placed. In this
                            // case resizing the viewport height may introduce slight baseline misalignments and make
                            // text look not centered vertically within the input.
                            //
                            // This happens because actual input text is rendered by a shadow DOM element, which doesn't use
                            // the line height of the input. Instead, it uses the default "line-height: normal", which means 1.2.
                            //
                            // So:
                            // * The input height is 35px, the font size is 13px
                            // * The shadow DOM element height is Math.ceil(13px * 1.2) = 16px
                            // * 35px - 16px = 19px for the browser to allocate above and below the shadow DOM element
                            //
                            // Hence adding the 1px padding to resolve the mismatch between the odd input height (35px) and
                            // the even shadow DOM value element height (16px). This way baseline position stays consistent
                            // no matter how the input is placed.
                            paddingBottom: '1px',
                        },
                    },
                },
            },
            cursor: {
                text: {
                    input: {
                        normal: {
                            cursor: 'text',
                        },
                    },
                },
                default: {
                    input: {
                        normal: {
                            cursor: 'default',
                        },
                    },
                },
            },
        },
    } }))); });
Input.defaultProps = {
    type: 'text',
    variant: 'normal',
    cursor: 'text',
    size: 0,
};

var Link = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Link$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            link: {
                normal: {},
                hover: {
                    textDecoration: 'underline',
                },
                focus: {
                    boxShadow: '0 0 0 2px rgba(0, 0, 0, 0.1)',
                    textDecoration: 'none',
                },
            },
        },
        variants: {
            variant: {
                ghost: {},
                highlight: {
                    link: {
                        normal: {
                            color: theme.colors.blue700,
                        },
                        focus: {
                            boxShadow: "0 0 0 2px " + theme.colors.blue500,
                        },
                    },
                },
                fade: {
                    link: {
                        normal: {
                            color: theme.colors.gray700,
                        },
                        focus: {
                            boxShadow: "0 0 0 2px " + theme.colors.gray400,
                        },
                    },
                },
                underline: {
                    link: {
                        normal: {
                            color: 'inherit',
                            textDecoration: 'underline',
                            textDecorationColor: theme.colors.gray500,
                        },
                        hover: {
                            textDecorationColor: 'inherit',
                        },
                        focus: {
                            boxShadow: "0 0 0 2px " + theme.colors.gray400,
                        },
                    },
                },
            },
        },
    } }))); });
Link.defaultProps = { variant: 'highlight' };

var systemProps = function (props) { return [spaceSet(props), sx(props)]; };
var List = styled('nav')(css({
    borderRadius: 1,
    paddingY: 1,
    paddingX: 0,
}), function (props) {
    return variant({
        variant: {
            shadow: {
                boxShadow: "0 10px 38px -10px " + transparentize(0.65, themeGet('colors.gray900')(props)) + ", 0 10px 20px -15px " + transparentize(0.8, themeGet('colors.gray900')(props)),
            },
        },
    });
}, systemProps);
var ListItem = styled('button')(css({
    alignItems: 'center',
    appearance: 'none',
    border: 0,
    boxSizing: 'border-box',
    cursor: 'pointer',
    display: 'flex',
    fontFamily: theme.fonts.normal,
    minHeight: '31px',
    outline: '1px solid transparent',
    outlineOffset: '-1px',
    paddingY: 1,
    paddingX: 3,
    position: 'relative',
    textAlign: 'left',
    textDecoration: 'none',
    userSelect: 'none',
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
    width: '100%',
    '&:hover:disabled': {
        backgroundColor: 'white',
    },
    '&:disabled': {
        color: 'gray500',
        cursor: 'not-allowed',
    },
    '&::-moz-focus-inner': {
        border: 0,
    },
}), function (props) {
    return variant({
        variant: {
            normal: {
                backgroundColor: 'white',
                color: 'gray800',
                '&:hover': {
                    backgroundColor: 'gray200',
                },
                '&:active': {
                    backgroundColor: 'gray300',
                },
                '&:focus': {
                    outlineColor: themeGet('colors.gray400')(props),
                },
            },
            active: {
                backgroundColor: 'blue600',
                color: 'white',
                '&:hover': {
                    backgroundColor: 'blue600',
                },
                '&:active': {
                    backgroundColor: 'blue600',
                },
                '&:focus': {
                    outlineColor: themeGet('colors.blue500')(props),
                },
            },
            selected: {
                backgroundColor: 'blue200',
                color: 'gray800',
                '&:hover': {
                    backgroundColor: 'blue200',
                },
                '&:active': {
                    backgroundColor: 'blue200',
                },
                '&:focus': {
                    outlineColor: themeGet('colors.blue400')(props),
                },
            },
        },
    });
}, {
    lineHeight: '1',
}, systemProps);
ListItem.defaultProps = { variant: 'normal' };
var ListGroup = styled('div')(css({
    paddingY: 1,
    paddingX: 0,
    marginY: 1,
    marginX: 0,
    borderTop: '1px solid',
    borderBottom: '1px solid',
    borderColor: 'gray300',
}), systemProps);

var Menu = function (props) { return (React.createElement(Menu$1, __assign({}, props, { styleConfig: menuStyleConfig }))); };
var menuStyleConfig = {
    base: {
        menu: {
            normal: {
                backgroundColor: theme.colors.white,
                borderRadius: theme.radii[1],
                paddingTop: theme.space[1],
                paddingBottom: theme.space[1],
                boxShadow: "0 10px 38px -10px " + transparentize(0.65, theme.colors.gray900) + ",\n0 10px 20px -15px " + transparentize(0.8, theme.colors.gray900),
            },
        },
        item: {
            normal: {
                fontFamily: theme.fonts.normal,
                fontSize: theme.fontSizes[1],
                fontVariantNumeric: 'tabular-nums',
                letterSpacing: '-0.001em',
                height: theme.sizes[5],
                paddingLeft: theme.space[5],
                paddingRight: theme.space[6],
            },
            highlighted: {
                backgroundColor: theme.colors.blue600,
                color: theme.colors.white,
            },
            disabled: {
                color: theme.colors.gray600,
            },
        },
        itemIcon: {
            normal: {
                left: theme.space[1],
            },
        },
        label: {
            normal: {
                fontFamily: theme.fonts.normal,
                fontSize: theme.fontSizes[1],
                fontVariantNumeric: 'tabular-nums',
                letterSpacing: '-0.001em',
                height: theme.sizes[5],
                paddingLeft: theme.space[5],
                paddingRight: theme.space[6],
                color: theme.colors.gray600,
            },
        },
        separator: {
            normal: {
                height: '1px',
                backgroundColor: theme.colors.gray300,
                marginTop: theme.space[1],
                marginBottom: theme.space[1],
            },
        },
        scrollIndicator: {
            normal: {
                backgroundColor: theme.colors.white,
                height: theme.sizes[4],
            },
        },
    },
};

var Pipe = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Pipe$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            pipe: {
                normal: {
                    width: 1,
                    backgroundColor: theme.colors.gray300,
                },
            },
        },
        variants: {
            variant: {
                normal: {
                    pipe: {
                        normal: {
                            height: theme.sizes[3],
                        },
                    },
                },
                large: {
                    pipe: {
                        normal: {
                            height: theme.sizes[7],
                        },
                    },
                },
                fluid: {
                    pipe: {
                        normal: {
                            height: '100%',
                        },
                    },
                },
            },
        },
    } }))); });
Pipe.defaultProps = { variant: 'normal' };

var Popover = function (props) {
    return (React.createElement(Popover$1, __assign({ side: "bottom", align: "center" }, props, { styleConfig: {
            base: {
                content: {
                    normal: {
                        backgroundColor: theme.colors.white,
                        borderRadius: theme.radii[1],
                        boxShadow: "0 10px 38px -10px " + transparentize(0.65, theme.colors.gray900) + ",\n                          0 10px 20px -15px " + transparentize(0.8, theme.colors.gray900),
                    },
                },
                arrow: {
                    normal: {
                        fill: theme.colors.white,
                    },
                },
            },
        } })));
};

var Radio = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Radio$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            radio: {
                normal: {
                    width: theme.sizes[4],
                    height: theme.sizes[4],
                    border: '1px solid',
                    borderRadius: '50%',
                    borderColor: theme.colors.gray400,
                    backgroundColor: theme.colors.white,
                },
                hover: {
                    borderColor: theme.colors.gray500,
                },
                focus: {
                    borderColor: theme.colors.blue500,
                    boxShadow: "0 0 0 1px " + theme.colors.blue500,
                },
                disabled: {
                    opacity: 0.5,
                },
            },
            icon: {
                normal: {
                    backgroundColor: theme.colors.blue600,
                    width: theme.sizes[2],
                    height: theme.sizes[2],
                    borderRadius: '50%',
                },
            },
        },
    } }))); });

var Select = React.forwardRef(function (props, forwardedRef) {
    return React.createElement(Select$1, __assign({ ref: forwardedRef, styleConfig: selectStyleConfig }, props));
});
Select.defaultProps = {
    variant: 'normal',
    size: 0,
};
var selectStyleConfigOverrides = {
    base: {
        button: {
            normal: {
                fontFamily: theme.fonts.normal,
                fontVariantNumeric: 'tabular-nums',
                lineHeight: theme.lineHeights[0],
                borderRadius: theme.radii[1],
                letterSpacing: '-0.001em',
                justifyContent: 'space-between',
                flexWrap: 'wrap',
            },
            focus: {
                boxShadow: "inset 0 0 0 1px " + theme.colors.gray500 + ", 0 0 0 1px " + theme.colors.gray500,
            },
            disabled: {
                color: theme.colors.gray500,
                cursor: 'not-allowed',
            },
        },
        buttonIcon: {
            normal: {
                marginLeft: theme.space[1],
            },
        },
        item: {
            normal: {},
            grouped: {
                paddingLeft: theme.space[6],
            },
        },
    },
    variants: {
        variant: {
            normal: {
                button: {
                    normal: {
                        backgroundColor: theme.colors.gray100,
                        boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                    },
                    hover: {
                        boxShadow: "inset 0 0 0 1px " + theme.colors.gray400,
                    },
                },
            },
            ghost: {
                button: {
                    normal: {
                        mixBlendMode: 'multiply',
                    },
                    hover: {
                        backgroundColor: theme.colors.gray200,
                    },
                },
            },
        },
        size: {
            0: {
                button: {
                    normal: {
                        fontSize: theme.fontSizes[1],
                        height: theme.sizes[5],
                        paddingLeft: theme.space[1],
                        paddingRight: theme.space[1],
                    },
                },
            },
            1: {
                button: {
                    normal: {
                        fontSize: theme.fontSizes[2],
                        height: theme.sizes[6],
                        paddingLeft: theme.space[2],
                        paddingRight: theme.space[2],
                    },
                },
            },
        },
    },
};
var selectStyleConfig = merge({}, menuStyleConfig, selectStyleConfigOverrides);

var Slider = React.forwardRef(function (props, forwardedRef) {
    var _a, _b, _c;
    return (React.createElement(Slider$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
            base: {
                slider: {
                    normal: {
                        paddingTop: 6,
                        paddingBottom: 6,
                    },
                },
                track: {
                    normal: (_a = {
                            backgroundColor: theme.colors.gray400,
                            height: 2,
                            borderRadius: 1
                        },
                        _a[SliderInput + ":disabled + &"] = {
                            backgroundColor: theme.colors.gray300,
                        },
                        _a),
                },
                innerTrack: {
                    normal: (_b = {
                            backgroundColor: theme.colors.blue600,
                            borderRadius: 'inherit'
                        },
                        _b[SliderInput + ":disabled + [data-part-id=\"track\"] &"] = {
                            backgroundColor: theme.colors.gray400,
                        },
                        _b),
                },
                thumb: {
                    normal: (_c = {
                            height: 12,
                            width: 12,
                            borderRadius: 6,
                            backgroundColor: theme.colors.white,
                            boxShadow: '0px 0px 2px rgba(0, 0, 0, 0.25), 0px 1px 3px rgba(0, 0, 0, 0.2)'
                        },
                        _c[SliderInput + ":disabled&"] = {
                            boxShadow: 'none',
                            backgroundColor: theme.colors.gray400,
                        },
                        _c),
                },
            },
        } })));
});
Slider.defaultProps = {
    step: '1',
};

var Subheading = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Text$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            text: {
                normal: {
                    fontFamily: theme.fonts.normal,
                    fontVariant: 'all-small-caps',
                    fontWeight: 500,
                    color: theme.colors.gray800,
                    letterSpacing: '0.05em',
                    // Chrome doesn't use kerning on the faux small caps otherwise
                    textTransform: 'uppercase',
                },
            },
        },
        variants: {
            size: {
                0: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[3],
                            lineHeight: theme.lineHeights[1],
                        },
                    },
                },
                1: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[5],
                            lineHeight: theme.lineHeights[1],
                        },
                    },
                },
            },
            truncate: {
                true: {
                    text: {
                        normal: {
                            whiteSpace: 'nowrap',
                            textOverflow: 'ellipsis',
                            overflow: 'hidden',
                        },
                    },
                },
            },
        },
    } }))); });
Subheading.defaultProps = {
    as: 'h2',
    size: 0,
    truncate: false,
};

var Switch = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Switch$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            switch: {
                normal: {
                    width: theme.sizes[5],
                    height: theme.sizes[3],
                    borderRadius: 9999,
                    backgroundColor: theme.colors.gray300,
                    transition: 'background-color 100ms ease-out',
                },
                active: {
                    filter: 'brightness(95%)',
                },
                checked: {
                    backgroundColor: theme.colors.blue600,
                    '[data-part-id="thumb"]': {
                        transform: "translateX(" + theme.space[2] + ")",
                    },
                },
                disabled: {
                    cursor: 'not-allowed',
                    backgroundColor: theme.colors.gray300,
                    '[data-part-id="thumb"]': {
                        backgroundColor: theme.colors.gray100,
                        boxShadow: 'none',
                    },
                },
            },
            thumb: {
                normal: {
                    width: '13px',
                    height: '13px',
                    marginLeft: '1px',
                    borderRadius: 9999,
                    backgroundColor: 'white',
                    boxShadow: '0px 0px 1px rgba(0, 0, 0, 0.3), 0px 1px 2px rgba(0, 0, 0, 0.2)',
                    transition: 'background-color 100ms ease-out, transform 100ms ease-out',
                },
            },
        },
    } }))); });

var Table = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Table$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            th: {
                normal: {
                    paddingTop: theme.space[2],
                    paddingBottom: theme.space[2],
                    paddingRight: theme.space[3],
                    borderBottom: '1px solid',
                    borderColor: theme.colors.gray300,
                    color: theme.colors.gray700,
                    fontSize: theme.fontSizes[1],
                    fontVariantNumeric: 'tabular-nums',
                    lineHeight: theme.lineHeights[2],
                    '&:last-of-type': {
                        paddingRight: 0,
                    },
                },
            },
            td: {
                normal: {
                    paddingTop: theme.space[2],
                    paddingBottom: theme.space[2],
                    paddingRight: theme.space[3],
                    borderBottom: '1px solid',
                    borderColor: theme.colors.gray300,
                    fontSize: theme.fontSizes[2],
                    fontVariantNumeric: 'tabular-nums',
                    lineHeight: theme.lineHeights[2],
                    '&:last-of-type': {
                        paddingRight: 0,
                    },
                },
            },
        },
    } }))); });

var Text = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Text$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            text: {
                normal: {
                    fontSize: 'inherit',
                    fontVariantNumeric: 'tabular-nums',
                    color: theme.colors.gray800,
                    margin: 0,
                },
            },
        },
        variants: {
            weight: {
                normal: {
                    text: {
                        normal: {
                            fontWeight: 400,
                        },
                    },
                },
                medium: {
                    text: {
                        normal: {
                            fontWeight: 500,
                        },
                    },
                },
            },
            size: {
                0: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[0],
                            lineHeight: theme.lineHeights[0],
                            letterSpacing: 0,
                        },
                    },
                },
                1: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[1],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.001em',
                        },
                    },
                },
                2: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[2],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.002em',
                        },
                    },
                },
                3: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[3],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.003em',
                        },
                    },
                },
                4: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[4],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.005em',
                        },
                    },
                },
                5: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[5],
                            lineHeight: theme.lineHeights[2],
                            letterSpacing: '-0.008em',
                        },
                    },
                },
                6: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[6],
                            lineHeight: theme.lineHeights[3],
                            letterSpacing: '-0.013em',
                        },
                    },
                },
                7: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[7],
                            lineHeight: theme.lineHeights[3],
                            letterSpacing: '-0.021em',
                        },
                    },
                },
                8: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[8],
                            lineHeight: theme.lineHeights[4],
                            letterSpacing: '-0.034em',
                        },
                    },
                },
                9: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[9],
                            lineHeight: theme.lineHeights[5],
                            letterSpacing: '-0.034em',
                        },
                    },
                },
                10: {
                    text: {
                        normal: {
                            fontSize: theme.fontSizes[10],
                            lineHeight: theme.lineHeights[9],
                            letterSpacing: '-0.055em',
                        },
                    },
                },
            },
            truncate: {
                true: {
                    text: {
                        normal: {
                            whiteSpace: 'nowrap',
                            textOverflow: 'ellipsis',
                            overflow: 'hidden',
                        },
                    },
                },
            },
        },
    } }))); });
Text.defaultProps = {
    truncate: false,
    size: 2,
    weight: 'normal',
};

var Textarea = React.forwardRef(function (props, forwardedRef) { return (React.createElement(Textarea$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            textarea: {
                normal: {
                    color: theme.colors.gray800,
                    fontFamily: theme.fonts.normal,
                    fontVariantNumeric: 'tabular-nums',
                    borderRadius: theme.radii[1],
                    minHeight: theme.sizes[9],
                },
                readOnly: {
                    color: theme.colors.gray700,
                },
                disabled: {
                    backgroundColor: theme.colors.gray100,
                    color: theme.colors.gray500,
                    cursor: 'not-allowed',
                },
                focus: {
                    boxShadow: "inset 0 0 0 1px " + theme.colors.blue500 + ", 0 0 0 1px " + theme.colors.blue500,
                    cursor: 'text',
                },
            },
            placeholder: {
                normal: {
                    color: theme.colors.gray600,
                },
            },
        },
        variants: {
            variant: {
                normal: {
                    textarea: {
                        normal: {
                            boxShadow: "inset 0 0 0 1px " + theme.colors.gray300,
                        },
                    },
                },
            },
            size: {
                0: {
                    textarea: {
                        normal: {
                            fontSize: theme.fontSizes[1],
                            letterSpacing: '-0.001em',
                            lineHeight: theme.lineHeights[1],
                            padding: theme.space[1],
                        },
                    },
                },
                1: {
                    textarea: {
                        normal: {
                            fontSize: theme.fontSizes[2],
                            letterSpacing: '-0.002em',
                            lineHeight: theme.lineHeights[1],
                            paddingTop: theme.space[1],
                            paddingBottom: theme.space[1],
                            paddingLeft: theme.space[2],
                            paddingRight: theme.space[2],
                        },
                    },
                },
            },
            cursor: {
                text: {
                    textarea: {
                        normal: {
                            cursor: 'text',
                        },
                    },
                },
                default: {
                    textarea: {
                        normal: {
                            cursor: 'default',
                        },
                    },
                },
            },
        },
    } }))); });
Textarea.defaultProps = {
    variant: 'normal',
    cursor: 'text',
    size: 0,
};

var ToggleButton = React.forwardRef(function (props, forwardedRef) { return (React.createElement(ToggleButton$1, __assign({}, props, { ref: forwardedRef, styleConfig: {
        base: {
            button: {
                normal: {
                    fontWeight: 400,
                    fontFamily: theme.fonts.normal,
                    fontVariantNumeric: 'tabular-nums',
                    border: '1px solid',
                    wordSpacing: '-0.025em',
                    letterSpacing: '0.01em',
                    zIndex: 0,
                    '&:first-child': {
                        borderTopLeftRadius: theme.radii[1],
                        borderBottomLeftRadius: theme.radii[1],
                    },
                    '&:last-child ': {
                        borderTopRightRadius: theme.radii[1],
                        borderBottomRightRadius: theme.radii[1],
                    },
                },
                hover: {
                    zIndex: 1,
                },
                focus: {
                    borderRadius: theme.radii[1],
                    zIndex: 3,
                },
                toggled: {
                    borderRadius: theme.radii[1],
                    zIndex: 2,
                },
            },
        },
        variants: {
            size: {
                0: {
                    button: {
                        normal: {
                            height: theme.sizes[4],
                            fontSize: theme.fontSizes[0],
                            minWidth: theme.sizes[5],
                            lineHeight: 1.1,
                        },
                    },
                },
                1: {
                    button: {
                        normal: {
                            height: theme.sizes[5],
                            fontSize: theme.fontSizes[1],
                            minWidth: theme.sizes[5],
                            lineHeight: theme.lineHeights[0],
                        },
                    },
                },
            },
            variant: {
                normal: {
                    button: {
                        normal: {
                            color: theme.colors.gray700,
                            borderColor: theme.colors.gray400,
                            backgroundColor: theme.colors.gray100,
                        },
                        hover: {
                            borderColor: theme.colors.gray500,
                        },
                        focus: {
                            borderColor: theme.colors.gray500,
                            boxShadow: "0 0 0 1px " + theme.colors.gray500,
                        },
                        toggled: {
                            color: theme.colors.blue800,
                            fontWeight: 500,
                            wordSpacing: '0.02em',
                            letterSpacing: '-0.015em',
                            borderColor: 'transparent',
                            backgroundColor: theme.colors.blue100,
                            boxShadow: "0 0 0 1px " + theme.colors.blue500,
                            '&:focus': {
                                borderColor: theme.colors.blue500,
                                boxShadow: "0 0 0 1px " + theme.colors.blue500,
                            },
                            '&:hover': {
                                borderColor: 'transparent',
                            },
                        },
                    },
                },
                fade: {
                    button: {
                        normal: {
                            color: theme.colors.gray600,
                            backgroundColor: theme.colors.white,
                            borderColor: theme.colors.gray300,
                        },
                        hover: {
                            borderColor: theme.colors.gray300,
                        },
                        focus: {
                            color: theme.colors.gray700,
                            borderColor: theme.colors.gray500,
                            boxShadow: "0 0 0 1px " + theme.colors.gray500,
                        },
                        toggled: {
                            color: theme.colors.gray700,
                            borderColor: 'transparent',
                            backgroundColor: theme.colors.gray100,
                            boxShadow: "0 0 0 1px " + theme.colors.gray400,
                            '&:hover': {
                                borderColor: 'transparent',
                            },
                            '&:focus': {
                                borderColor: theme.colors.blue500,
                                boxShadow: "0 0 0 1px " + theme.colors.blue500,
                            },
                        },
                    },
                },
            },
        },
    } }))); });
ToggleButton.defaultProps = {
    size: 1,
    variant: 'normal',
};

var Tooltip = function (props) { return (React.createElement(Tooltip$1, __assign({ arrowOffset: 6, sideOffset: -3 }, props, { styleConfig: {
        base: {
            content: {
                normal: {
                    backgroundColor: theme.colors.gray800,
                    paddingTop: 0,
                    paddingRight: theme.space[2],
                    paddingBottom: 0,
                    paddingLeft: theme.space[2],
                    lineHeight: theme.lineHeights[2],
                    borderRadius: theme.radii[1],
                    color: theme.colors.white,
                    fontSize: theme.fontSizes[1],
                    fontVariantNumeric: 'tabular-nums',
                    letterSpacing: '-0.001em',
                },
            },
            arrow: {
                normal: {
                    width: 12,
                    height: 6,
                    fill: theme.colors.gray800,
                },
            },
        },
    } }))); };

export { Avatar, Badge, Button, Card, CardLink, Checkbox, Code, Container, Dialog, Divider, Heading, Hover, IconButton, Input, Link, List, ListGroup, ListItem, Menu, Pipe, Popover, Radio, RadixProvider, Select, Slider, Subheading, Switch, Table, Text, Textarea, ToggleButton, Tooltip, theme };
