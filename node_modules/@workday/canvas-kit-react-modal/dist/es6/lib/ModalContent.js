var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import ReactDOM from 'react-dom';
import styled from '@emotion/styled';
import { keyframes } from '@emotion/core';
import Popup, { PopupPadding, usePopupStack, useCloseOnEscape, useAssistiveHideSiblings, useFocusTrap, } from '@workday/canvas-kit-react-popup';
import { PopupStack } from '@workday/canvas-kit-popup-stack';
import { ModalWidth } from './Modal';
var fadeIn = keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  from {\n    background: none;\n  }\n  to {\n    background: rgba(0,0,0,0.65);\n  }\n"], ["\n  from {\n    background: none;\n  }\n  to {\n    background: rgba(0,0,0,0.65);\n  }\n"])));
var Container = styled('div')({
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100vw',
    height: '100vh',
    background: 'rgba(0,0,0,0.65)',
    animationName: "" + fadeIn,
    animationDuration: '0.3s',
});
var CenteringContainer = styled('div')({
    height: '100vh',
    display: 'flex',
    position: 'absolute',
    left: 0,
    top: 0,
    alignItems: 'center',
    justifyContent: 'center',
});
var transformOrigin = {
    horizontal: 'center',
    vertical: 'bottom',
};
function getFirstElementToFocus(overlayEl) {
    var modalEl = overlayEl.querySelector('[role=dialog]');
    var firstFocusable = modalEl === null || modalEl === void 0 ? void 0 : modalEl.querySelector("[data-close=close],[id=\"" + (modalEl === null || modalEl === void 0 ? void 0 : modalEl.getAttribute('aria-labelledby')) + "\"]");
    if (firstFocusable) {
        if (firstFocusable.tagName === 'H3') {
            firstFocusable.tabIndex = 0;
            firstFocusable.style.outline = 'none';
            var changeTabIndex_1 = function () {
                firstFocusable.removeEventListener('blur', changeTabIndex_1);
                requestAnimationFrame(function () {
                    firstFocusable.removeAttribute('tabIndex');
                });
            };
            firstFocusable.addEventListener('blur', changeTabIndex_1);
        }
        return firstFocusable;
    }
    else {
        throw new Error('No focusable element was found. Please ensure modal has at least one focusable element');
    }
}
var getFromWindow = function (property, defaultValue) {
    var _a;
    if (typeof window !== undefined) {
        return (_a = window[property]) !== null && _a !== void 0 ? _a : defaultValue;
    }
    return defaultValue;
};
var useWindowSize = function () {
    var _a = React.useState(getFromWindow('innerWidth', 0)), width = _a[0], setWidth = _a[1];
    var _b = React.useState(getFromWindow('innerHeight', 0)), height = _b[0], setHeight = _b[1];
    var onResize = function () {
        setWidth(window.innerWidth);
        setHeight(window.innerHeight);
    };
    React.useEffect(function () {
        window.addEventListener('resize', onResize);
        return function () {
            window.removeEventListener('resize', onResize);
        };
    }, []);
    return { width: width, height: height };
};
var useInitialFocus = function (modalRef, firstFocusRef) {
    React.useLayoutEffect(function () {
        var handlerRef = document.activeElement instanceof HTMLElement ? document.activeElement : null;
        if (modalRef.current) {
            var elem = (firstFocusRef && firstFocusRef.current) || getFirstElementToFocus(modalRef.current);
            elem.focus();
        }
        return function () {
            if (handlerRef) {
                handlerRef.focus();
            }
        };
    }, [modalRef, firstFocusRef]);
};
var ModalContent = function (_a) {
    var ariaLabel = _a.ariaLabel, _b = _a.width, width = _b === void 0 ? ModalWidth.s : _b, _c = _a.padding, padding = _c === void 0 ? PopupPadding.l : _c, container = _a.container, handleClose = _a.handleClose, children = _a.children, firstFocusRef = _a.firstFocusRef, heading = _a.heading, elemProps = __rest(_a, ["ariaLabel", "width", "padding", "container", "handleClose", "children", "firstFocusRef", "heading"]);
    var centeringRef = React.useRef(null);
    var onClose = function () { return handleClose === null || handleClose === void 0 ? void 0 : handleClose(); };
    var stackRef = usePopupStack();
    useCloseOnEscape(stackRef, onClose);
    useFocusTrap(stackRef);
    useInitialFocus(stackRef, firstFocusRef);
    useAssistiveHideSiblings(stackRef);
    var onOverlayClick = function (event) {
        if (event.target === centeringRef.current && PopupStack.isTopmost(stackRef.current)) {
            onClose();
        }
    };
    var windowSize = useWindowSize();
    var content = (React.createElement(Container, __assign({}, elemProps),
        React.createElement(CenteringContainer, { ref: centeringRef, style: { width: windowSize.width % 2 === 1 ? 'calc(100vw - 1px)' : '100vw' }, onMouseDown: onOverlayClick },
            React.createElement(Popup, { width: width, heading: heading, handleClose: handleClose, padding: padding, transformOrigin: transformOrigin, "aria-modal": true, ariaLabel: ariaLabel }, children))));
    if (typeof window !== 'undefined') {
        return ReactDOM.createPortal(content, container || stackRef.current);
    }
    else {
        return null;
    }
};
export default ModalContent;
var templateObject_1;
