var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState } from 'react';
import { styled, focusRing, hideMouseFocus } from '@workday/canvas-kit-react-common';
import isPropValid from '@emotion/is-prop-valid';
import { borderRadius, colors } from '@workday/canvas-kit-react-core';
import { SystemIconCircle, SystemIconCircleSize } from '@workday/canvas-kit-react-icon';
import { userIcon } from '@workday/canvas-system-icons-web';
export var AvatarVariant;
(function (AvatarVariant) {
    AvatarVariant[AvatarVariant["Light"] = 0] = "Light";
    AvatarVariant[AvatarVariant["Dark"] = 1] = "Dark";
})(AvatarVariant || (AvatarVariant = {}));
var fadeTransition = 'opacity 150ms linear';
var StyledContainer = styled('button', {
    shouldForwardProp: function (prop) { return isPropValid(prop) && prop !== 'size'; },
})(__assign({ background: colors.soap200, position: 'relative', display: 'flex', alignItems: 'center', justifyContent: 'center', padding: 0, border: 0, boxSizing: 'border-box', overflow: 'hidden', borderRadius: borderRadius.circle, '&:not([disabled])': {
        '&:focus': __assign({ outline: 'none' }, focusRing({ separation: 2 })),
    } }, hideMouseFocus), function (_a) {
    var size = _a.size;
    return ({
        height: size,
        width: size,
    });
}, function (_a) {
    var onClick = _a.onClick;
    return ({
        cursor: onClick ? 'pointer' : 'default',
    });
});
var StyledStack = styled('span')({
    position: 'absolute',
    top: 0,
    left: 0,
}, function (_a) {
    var size = _a.size;
    return ({
        height: size,
        width: size,
    });
});
var StyledIcon = styled(SystemIconCircle)({
    transition: fadeTransition,
}, function (_a) {
    var isImageLoaded = _a.isImageLoaded;
    return ({
        opacity: isImageLoaded ? 0 : 1,
    });
});
var StyledImage = styled('img')({
    width: '100%',
    height: '100%',
    borderRadius: borderRadius.circle,
    transition: fadeTransition,
}, function (_a) {
    var isLoaded = _a.isLoaded;
    return ({
        opacity: isLoaded ? 1 : 0,
    });
});
var Avatar = React.forwardRef(function (_a, ref) {
    var _b = _a.variant, variant = _b === void 0 ? AvatarVariant.Light : _b, _c = _a.size, size = _c === void 0 ? SystemIconCircleSize.m : _c, _d = _a.altText, altText = _d === void 0 ? 'Avatar' : _d, url = _a.url, onClick = _a.onClick, elemProps = __rest(_a, ["variant", "size", "altText", "url", "onClick"]);
    var _e = useState(false), imageLoaded = _e[0], setImageLoaded = _e[1];
    var loadImage = function () {
        if (!imageLoaded) {
            setImageLoaded(true);
        }
    };
    var background = variant === AvatarVariant.Dark ? colors.blueberry400 : colors.soap300;
    return (React.createElement(StyledContainer, __assign({ size: size, "aria-label": altText, onClick: onClick, disabled: onClick ? false : true, ref: ref }, elemProps),
        React.createElement(StyledStack, { size: size },
            React.createElement(StyledIcon, { icon: userIcon, background: background, size: size, isImageLoaded: imageLoaded })),
        url && (React.createElement(StyledStack, { size: size },
            React.createElement(StyledImage, { src: url, alt: altText, onLoad: loadImage, isLoaded: imageLoaded })))));
});
Avatar.Variant = AvatarVariant;
Avatar.Size = SystemIconCircleSize;
export default Avatar;
