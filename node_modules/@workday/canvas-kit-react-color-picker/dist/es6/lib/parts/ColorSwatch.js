var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { borderRadius, colors } from '@workday/canvas-kit-react-core';
import { pickForegroundColor } from '@workday/canvas-kit-react-common';
import * as React from 'react';
import styled from '@emotion/styled';
import { checkSmallIcon } from '@workday/canvas-system-icons-web';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
var Container = styled('div')({
    width: 20,
    height: 20,
    borderRadius: borderRadius.s,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    '& > *': {
        margin: -2,
    },
}, function (_a) {
    var color = _a.color, showCheck = _a.showCheck;
    return ({
        backgroundColor: color,
        boxShadow: showCheck || color === colors.frenchVanilla100
            ? 'inset 0px 0px 0px 1px rgba(0, 0, 0, 0.25)'
            : undefined,
    });
});
export var ColorSwatch = function (_a) {
    var color = _a.color, _b = _a.showCheck, showCheck = _b === void 0 ? false : _b, elemProps = __rest(_a, ["color", "showCheck"]);
    return (React.createElement(Container, __assign({ color: color, showCheck: showCheck }, elemProps), showCheck && (React.createElement(SystemIcon, { fill: pickForegroundColor(color), fillHover: pickForegroundColor(color), icon: checkSmallIcon, color: color }))));
};
