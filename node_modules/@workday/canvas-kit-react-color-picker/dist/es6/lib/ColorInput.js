var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { expandHex, styled, ContentDirection, } from '@workday/canvas-kit-react-common';
import { colors, spacing, type, inputColors } from '@workday/canvas-kit-react-core';
import TextInput from '@workday/canvas-kit-react-text-input';
import { ColorSwatch } from './parts/ColorSwatch';
var colorInputWidth = 116;
var CustomHexInput = styled(TextInput)(__assign(__assign({ boxSizing: 'border-box', minWidth: colorInputWidth, width: colorInputWidth }, type.variant.mono), { '&:focus::placeholder': {
        color: 'transparent',
    } }), function (_a) {
    var grow = _a.grow;
    return grow && {
        minWidth: '100%',
        width: '100%',
    };
}, function (_a) {
    var disabled = _a.disabled;
    return ({
        backgroundColor: disabled ? colors.soap200 : '',
    });
}, function (_a) {
    var theme = _a.theme;
    return ({
        paddingLeft: theme.canvas.direction === ContentDirection.LTR ? '46px' : 'calc(100% - 86px) /* @noflip */',
    });
});
var ColorInputContainer = styled('div')({
    position: 'relative',
    width: colorInputWidth,
}, function (_a) {
    var grow = _a.grow;
    return grow && {
        minWidth: '100%',
        width: '100%',
    };
});
var PoundSignPrefix = styled('span')(__assign(__assign({ position: 'absolute', top: 10 }, type.body), type.variant.mono), function (_a) {
    var disabled = _a.disabled;
    return ({
        color: disabled ? inputColors.disabled.text : undefined,
    });
}, function (_a) {
    var theme = _a.theme;
    return ({
        left: theme.canvas.direction === ContentDirection.LTR ? '36px' : '88px',
    });
});
var SwatchTile = styled(ColorSwatch)({
    position: 'absolute',
    top: 0,
    left: spacing.xxs,
    marginTop: '10px',
    boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.25)',
    pointerEvents: 'none',
});
var ColorInput = (function (_super) {
    __extends(ColorInput, _super);
    function ColorInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleChange = function (e) {
            var value = _this.formatValue(e.currentTarget.value);
            if (_this.props.onChange) {
                _this.props.onChange(e);
            }
            if (_this.isValidHex(value) && _this.props.onValidColorChange) {
                _this.props.onValidColorChange("#" + expandHex(value));
            }
        };
        _this.isValidHex = function (value) {
            return /(^#?[0-9A-F]{3}$)|(^#?[0-9A-F]{6}$)/i.test(value);
        };
        _this.formatValue = function (value) {
            return value.replace(/#/g, '').substring(0, 6);
        };
        return _this;
    }
    ColorInput.prototype.render = function () {
        var _a = this.props, _b = _a.placeholder, placeholder = _b === void 0 ? 'FFFFFF' : _b, _c = _a.value, value = _c === void 0 ? '' : _c, showCheck = _a.showCheck, onChange = _a.onChange, onValidColorChange = _a.onValidColorChange, inputRef = _a.inputRef, disabled = _a.disabled, error = _a.error, grow = _a.grow, elemProps = __rest(_a, ["placeholder", "value", "showCheck", "onChange", "onValidColorChange", "inputRef", "disabled", "error", "grow"]);
        var formattedValue = this.formatValue(value);
        return (React.createElement(ColorInputContainer, { grow: grow },
            React.createElement(CustomHexInput, __assign({ dir: "ltr", inputRef: inputRef, onChange: this.handleChange, type: "text", placeholder: value ? undefined : placeholder, value: formattedValue, error: error, spellCheck: false, disabled: disabled, grow: grow, maxLength: 7 }, elemProps)),
            React.createElement(SwatchTile, { showCheck: showCheck, color: this.isValidHex(formattedValue) ? "#" + formattedValue : '' }),
            React.createElement(PoundSignPrefix, { "aria-hidden": true, disabled: disabled }, "#")));
    };
    return ColorInput;
}(React.Component));
export default ColorInput;
