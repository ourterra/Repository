"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var canvas_kit_react_core_1 = require("@workday/canvas-kit-react-core");
var canvas_kit_react_button_1 = require("@workday/canvas-kit-react-button");
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var SegmentedControlContainer = canvas_kit_react_common_1.styled('div')({
    '& button': {
        borderRadius: canvas_kit_react_core_1.borderRadius.zero,
        border: "1px solid " + canvas_kit_react_core_1.colors.soap500,
        borderLeft: 'none',
        '&[aria-pressed="true"]': {
            borderColor: canvas_kit_react_core_1.colors.blueberry400,
            '&:hover, &:focus:hover': {
                background: canvas_kit_react_core_1.colors.blueberry400,
            },
        },
        '&:first-of-type': {
            borderRadius: canvas_kit_react_core_1.borderRadius.m + " 0 0 " + canvas_kit_react_core_1.borderRadius.m,
            borderLeft: "1px solid " + canvas_kit_react_core_1.colors.soap500,
        },
        '&:last-of-type': {
            borderRadius: "0 " + canvas_kit_react_core_1.borderRadius.m + " " + canvas_kit_react_core_1.borderRadius.m + " 0",
        },
        '&:focus': __assign({ borderRadius: canvas_kit_react_core_1.borderRadius.m, zIndex: 1, animation: 'none', transition: 'all 120ms, border-radius 1ms' }, canvas_kit_react_common_1.mouseFocusBehavior({
            '&': {
                borderRadius: canvas_kit_react_core_1.borderRadius.zero,
                '&:first-of-type': {
                    borderRadius: canvas_kit_react_core_1.borderRadius.m + " 0 0 " + canvas_kit_react_core_1.borderRadius.m,
                },
                '&:last-of-type': {
                    borderRadius: "0 " + canvas_kit_react_core_1.borderRadius.m + " " + canvas_kit_react_core_1.borderRadius.m + " 0",
                },
            },
        })),
    },
}, function (_a) {
    var theme = _a.theme;
    return ({
        '& button[aria-pressed="true"]': {
            borderColor: theme.canvas.palette.primary.main,
            '&:hover, &:focus:hover': {
                background: theme.canvas.palette.primary.main,
            },
        },
    });
});
var onButtonClick = function (existingOnClick, onChange, index, event) {
    if (existingOnClick) {
        existingOnClick(event);
    }
    var target = event.currentTarget;
    if (target && onChange) {
        if (target.value) {
            onChange(target.value);
        }
        else {
            onChange(index);
        }
    }
};
var SegmentedControl = function (_a) {
    var _b = _a.value, value = _b === void 0 ? 0 : _b, children = _a.children, onChange = _a.onChange, elemProps = __rest(_a, ["value", "children", "onChange"]);
    return (React.createElement(SegmentedControlContainer, __assign({}, elemProps), React.Children.map(children, function (child, index) {
        if (typeof child.type === typeof canvas_kit_react_button_1.IconButton) {
            return React.cloneElement(child, {
                toggled: typeof value === 'number' ? index === value : child.props.value === value,
                variant: canvas_kit_react_button_1.IconButton.Variant.SquareFilled,
                onClick: onButtonClick.bind(undefined, child.props.onClick, onChange, index),
            });
        }
        return child;
    })));
};
exports.default = SegmentedControl;
