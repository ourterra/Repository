var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { ErrorType, errorRing, styled, } from '@workday/canvas-kit-react-common';
import { colors, borderRadius, inputColors, spacingNumbers, type, spacing, } from '@workday/canvas-kit-react-core';
import { caretDownSmallIcon } from '@workday/canvas-system-icons-web';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
var SelectContainer = styled('select')(__assign(__assign({}, type.body), { border: "1px solid " + inputColors.border, display: 'block', backgroundColor: inputColors.background, borderRadius: borderRadius.m, boxSizing: 'border-box', height: spacing.xl, minWidth: 280, transition: '0.2s box-shadow, 0.2s border-color', padding: spacingNumbers.xxs, margin: 0, MozAppearance: 'none', WebkitAppearance: 'none', '&::placeholder': {
        color: inputColors.placeholder,
    }, '&:hover': {
        borderColor: inputColors.hoverBorder,
    }, '&:focus:not([disabled])': {
        borderColor: inputColors.focusBorder,
        boxShadow: "inset 0 0 0 1px " + inputColors.focusBorder,
        outline: 'none',
    }, '&:disabled': {
        backgroundColor: inputColors.disabled.background,
        borderColor: inputColors.disabled.border,
        color: inputColors.disabled.text,
        '&::placeholder': {
            color: inputColors.disabled.text,
        },
    } }), function (_a) {
    var error = _a.error;
    return (__assign({}, errorRing(error)));
}, function (_a) {
    var grow = _a.grow;
    return grow && {
        width: '100%',
    };
});
var SelectDropdownIcon = styled(SystemIcon)({
    position: 'absolute',
    top: spacing.xxxs,
    right: spacing.xxxs,
    padding: spacing.xxxs,
    pointerEvents: 'none',
    '& path': {
        transition: '100ms fill',
    },
});
var SelectWrapper = styled('div')({
    position: 'relative',
}, function (_a) {
    var grow = _a.grow;
    return ({
        display: grow ? 'block' : 'inline-block',
    });
}, function (_a) {
    var disabled = _a.disabled;
    return ({
        '& span': {
            backgroundColor: disabled ? colors.soap100 : colors.frenchVanilla100,
        },
        '&:hover path': {
            fill: disabled ? undefined : colors.licorice500,
        },
    });
});
var Select = (function (_super) {
    __extends(Select, _super);
    function Select() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Select.prototype.render = function () {
        var _a = this.props, _b = _a.disabled, disabled = _b === void 0 ? false : _b, error = _a.error, grow = _a.grow, children = _a.children, value = _a.value, onChange = _a.onChange, elemProps = __rest(_a, ["disabled", "error", "grow", "children", "value", "onChange"]);
        return (React.createElement(SelectWrapper, { grow: grow, disabled: disabled },
            React.createElement(SelectContainer, __assign({ disabled: disabled, grow: grow, error: error, value: value, onChange: onChange }, elemProps), children),
            React.createElement(SelectDropdownIcon, { icon: caretDownSmallIcon, color: disabled ? colors.licorice100 : colors.licorice200, colorHover: disabled ? colors.licorice100 : colors.licorice500 })));
    };
    Select.ErrorType = ErrorType;
    return Select;
}(React.Component));
export default Select;
