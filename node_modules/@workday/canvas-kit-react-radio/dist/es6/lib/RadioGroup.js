var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import Radio from './Radio';
import { borderRadius, spacing } from '@workday/canvas-kit-react-core';
import { ErrorType, getErrorColors, styled, } from '@workday/canvas-kit-react-common';
var Container = styled('div')({
    display: 'inline-block',
    boxSizing: 'border-box',
    borderRadius: borderRadius.m,
    padding: spacing.xxxs + " " + spacing.xs,
    margin: "-" + spacing.xxxs + " -" + spacing.xs,
    '& > div': {
        margin: spacing.xxs + " " + spacing.zero,
        '&:first-of-type': {
            marginTop: spacing.xxxs,
        },
        '&:last-child': {
            marginBottom: spacing.xxxs,
        },
    },
}, function (_a) {
    var grow = _a.grow;
    return grow && { width: '100%' };
}, function (_a) {
    var error = _a.error, theme = _a.theme;
    var errorColors = getErrorColors(error, theme);
    return {
        transition: '100ms box-shadow',
        boxShadow: errorColors.outer !== errorColors.inner
            ? "inset 0 0 0 1px " + errorColors.outer + ", inset 0 0 0 3px " + errorColors.inner
            : "inset 0 0 0 2px " + errorColors.inner,
    };
});
var RadioGroup = (function (_super) {
    __extends(RadioGroup, _super);
    function RadioGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderChild = function (child, index, value) {
            if (typeof child.type === typeof Radio) {
                var childProps = child.props;
                var checked = typeof value === 'number' ? index === value : childProps.value === value;
                var name_1 = _this.props.name ? _this.props.name : childProps.name;
                return React.cloneElement(child, {
                    checked: checked,
                    name: name_1,
                    onChange: _this.onRadioChange.bind(_this, childProps.onChange, index),
                });
            }
            return child;
        };
        _this.onRadioChange = function (existingOnChange, index, event) {
            if (existingOnChange) {
                existingOnChange(event);
            }
            var target = event.currentTarget;
            if (target && _this.props.onChange) {
                if (target.value) {
                    _this.props.onChange(target.value);
                }
                else {
                    _this.props.onChange(index);
                }
            }
        };
        return _this;
    }
    RadioGroup.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.value, value = _b === void 0 ? 0 : _b, children = _a.children, error = _a.error, onChange = _a.onChange, grow = _a.grow, elemProps = __rest(_a, ["value", "children", "error", "onChange", "grow"]);
        return (React.createElement(Container, __assign({ error: error, grow: grow }, elemProps), React.Children.map(children, function (child, index) { return _this.renderChild(child, index, value); })));
    };
    RadioGroup.ErrorType = ErrorType;
    return RadioGroup;
}(React.Component));
export default RadioGroup;
