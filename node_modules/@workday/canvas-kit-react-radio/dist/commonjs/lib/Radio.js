"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var canvas_kit_react_core_1 = __importStar(require("@workday/canvas-kit-react-core"));
var radioBorderRadius = 9;
var radioDot = 8;
var radioHeight = 18;
var radioTapArea = canvas_kit_react_core_1.spacingNumbers.m;
var radioContainerHeight = radioTapArea;
var radioLabelDistance = canvas_kit_react_core_1.spacingNumbers.xs;
var radioWidth = 18;
var rippleRadius = (canvas_kit_react_core_1.spacingNumbers.l - radioWidth) / 2;
var RadioContainer = canvas_kit_react_common_1.styled('div')({
    display: 'flex',
    alignItems: 'center',
    minHeight: radioContainerHeight,
    position: 'relative',
});
var RadioInputWrapper = canvas_kit_react_common_1.styled('div')({
    display: 'flex',
    height: radioHeight,
    width: radioWidth,
});
var RadioRipple = canvas_kit_react_common_1.styled('span')({
    borderRadius: canvas_kit_react_core_1.borderRadius.circle,
    boxShadow: "0 0 0 0 " + canvas_kit_react_core_1.colors.soap200,
    height: radioHeight,
    transition: 'box-shadow 150ms ease-out',
    width: radioWidth,
    position: 'absolute',
    pointerEvents: 'none',
    zIndex: -1,
});
var RadioInput = canvas_kit_react_common_1.styled('input')({
    borderRadius: radioBorderRadius,
    width: radioTapArea,
    height: radioTapArea,
    margin: 0,
    marginTop: '-3px',
    marginLeft: '-3px',
    position: 'absolute',
    opacity: 0,
    '&:focus, &:active': {
        outline: 'none',
    },
}, function (_a) {
    var checked = _a.checked, disabled = _a.disabled, _b = _a.theme.canvas.palette, themePrimary = _b.primary, themeFocusOutline = _b.common.focusOutline;
    return (__assign({ cursor: disabled ? undefined : 'pointer', '&:hover ~ span:first-of-type': {
            boxShadow: disabled ? undefined : "0 0 0 " + rippleRadius + "px " + canvas_kit_react_core_1.colors.soap200,
        }, '&:hover ~ div:first-of-type': {
            backgroundColor: checked
                ? themePrimary.main
                : disabled
                    ? canvas_kit_react_core_1.inputColors.disabled.background
                    : 'white',
            borderColor: checked
                ? themePrimary.main
                : disabled
                    ? canvas_kit_react_core_1.inputColors.disabled.border
                    : canvas_kit_react_core_1.inputColors.hoverBorder,
            borderWidth: '1px',
        }, '&:focus, &focus:hover': {
            '& ~ div:first-of-type': {
                borderColor: checked ? themePrimary.main : themeFocusOutline,
                borderWidth: '2px',
            },
        }, '&:checked:focus ~ div:first-of-type': __assign({}, canvas_kit_react_common_1.focusRing({ separation: 2, outerColor: themeFocusOutline })) }, canvas_kit_react_common_1.mouseFocusBehavior({
        '&:focus ~ div:first-of-type': __assign(__assign({}, canvas_kit_react_common_1.focusRing({ width: 0, outerColor: themeFocusOutline })), { borderWidth: '1px', borderColor: checked ? themePrimary.main : canvas_kit_react_core_1.inputColors.border }),
        '&:focus:hover ~ div:first-of-type, &:focus:active ~ div:first-of-type': {
            borderColor: checked ? themePrimary.main : canvas_kit_react_core_1.inputColors.hoverBorder,
        },
    })));
});
var RadioBackground = canvas_kit_react_common_1.styled('div')({
    alignItems: 'center',
    backgroundColor: canvas_kit_react_core_1.colors.frenchVanilla100,
    borderRadius: radioBorderRadius,
    borderStyle: 'solid',
    borderWidth: '1px',
    boxSizing: 'border-box',
    display: 'flex',
    height: radioHeight,
    justifyContent: 'center',
    padding: '0px 2px',
    pointerEvents: 'none',
    position: 'absolute',
    transition: 'border 200ms ease, background 200ms',
    width: radioWidth,
}, function (_a) {
    var checked = _a.checked, disabled = _a.disabled, themePrimary = _a.theme.canvas.palette.primary;
    return ({
        borderColor: checked
            ? themePrimary.main
            : disabled
                ? canvas_kit_react_core_1.inputColors.disabled.border
                : canvas_kit_react_core_1.inputColors.border,
        backgroundColor: checked
            ? themePrimary.main
            : disabled
                ? canvas_kit_react_core_1.inputColors.disabled.background
                : 'white',
    });
});
var RadioCheck = canvas_kit_react_common_1.styled('div')({
    borderRadius: radioBorderRadius,
    display: 'flex',
    flexDirection: 'column',
    height: radioDot,
    pointerEvents: 'none',
    transition: 'transform 200ms ease, opacity 200ms ease',
    width: radioDot,
}, function (_a) {
    var theme = _a.theme;
    return ({
        backgroundColor: theme.canvas.palette.primary.contrast,
    });
}, function (_a) {
    var checked = _a.checked;
    return ({
        opacity: checked ? 1 : 0,
        transform: checked ? 'scale(1)' : 'scale(0.5)',
    });
});
var RadioLabel = canvas_kit_react_common_1.styled('label')(__assign(__assign({}, canvas_kit_react_core_1.default.type.body), { paddingLeft: radioLabelDistance }), function (_a) {
    var disabled = _a.disabled;
    return (disabled ? { color: canvas_kit_react_core_1.inputColors.disabled.text } : { cursor: 'pointer' });
});
exports.Radio = function (_a) {
    var _b = _a.checked, checked = _b === void 0 ? false : _b, id = _a.id, _c = _a.label, label = _c === void 0 ? '' : _c, disabled = _a.disabled, inputRef = _a.inputRef, name = _a.name, onChange = _a.onChange, value = _a.value, elemProps = __rest(_a, ["checked", "id", "label", "disabled", "inputRef", "name", "onChange", "value"]);
    var inputId = canvas_kit_react_common_1.useUniqueId(id);
    return (React.createElement(RadioContainer, null,
        React.createElement(RadioInputWrapper, { disabled: disabled },
            React.createElement(RadioInput, __assign({ checked: checked, disabled: disabled, id: inputId, ref: inputRef, name: name, onChange: onChange, type: "radio", value: value, "aria-checked": checked }, elemProps)),
            React.createElement(RadioRipple, null),
            React.createElement(RadioBackground, { checked: checked, disabled: disabled },
                React.createElement(RadioCheck, { checked: checked }))),
        label && (React.createElement(RadioLabel, { htmlFor: inputId, disabled: disabled }, label))));
};
exports.default = exports.Radio;
