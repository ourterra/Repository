var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { keyframes } from '@emotion/core';
import styled from '@emotion/styled';
import canvas, { borderRadius } from '@workday/canvas-kit-react-core';
var keyframesLoading = keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  0%,\n  80%,\n  100% {\n    transform: scale(0);\n}\n  40% {\n    transform: scale(1);\n}"], ["\n  0%,\n  80%,\n  100% {\n    transform: scale(0);\n}\n  40% {\n    transform: scale(1);\n}"])));
var LoadingAnimationDot = styled('div')({
    backgroundColor: canvas.colors.soap400,
    width: canvas.spacing.s,
    height: canvas.spacing.s,
    fontSize: '0px',
    borderRadius: borderRadius.circle,
    transform: 'scale(0)',
    display: 'inline-block',
    marginRight: canvas.spacing.xxs,
    animationName: keyframesLoading,
    animationDuration: '1400ms',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'ease-in-out',
    animationFillMode: 'both',
    '&:last-child': {
        marginRight: 0,
    },
}, function (_a) {
    var animationDelay = _a.animationDelay;
    return ({
        animationDelay: animationDelay + 'ms',
    });
});
var Container = styled('div')({
    display: 'inline-block',
});
export default function LoadingDots(props) {
    var elemProps = __rest(props, []);
    return (React.createElement(Container, __assign({}, elemProps),
        React.createElement(LoadingAnimationDot, { animationDelay: 0 }),
        React.createElement(LoadingAnimationDot, { animationDelay: 160 }),
        React.createElement(LoadingAnimationDot, { animationDelay: 320 })));
}
var templateObject_1;
