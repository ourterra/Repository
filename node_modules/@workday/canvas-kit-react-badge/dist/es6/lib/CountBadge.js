var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { keyframes } from '@emotion/core';
import styled from '@emotion/styled';
import { borderRadius, colors, fontFamily } from '@workday/canvas-kit-react-core';
var variants = {
    default: {
        background: colors.cinnamon500,
        color: colors.frenchVanilla100,
        textShadow: '0 0 1px rgba(0,0,0, 0.35)',
    },
    inverse: {
        background: colors.frenchVanilla100,
        boxShadow: '0 1px 2px rgba(0,0,0, 0.25)',
        color: colors.blueberry400,
    },
};
var grow = keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  from {\n    transform: scale(0.85);\n  }\n\n  to {\n    transform: scale(1.0);\n  }\n"], ["\n  from {\n    transform: scale(0.85);\n  }\n\n  to {\n    transform: scale(1.0);\n  }\n"])));
var Container = styled('span')({
    alignItems: 'center',
    animation: grow + " 0.2s ease",
    borderRadius: borderRadius.circle,
    boxSizing: 'border-box',
    display: 'inline-flex',
    fontFamily: fontFamily,
    fontSize: '12px',
    fontWeight: 700,
    height: '20px',
    justifyContent: 'center',
    lineHeight: '20px',
    minWidth: '20px',
    padding: '0 6.5px',
}, function (_a) {
    var _b = _a.variant, variant = _b === void 0 ? 'default' : _b;
    return (__assign({}, variants[variant]));
});
var CountBadge = function (props) {
    var _a = props.variant, variant = _a === void 0 ? 'default' : _a, _b = props.count, count = _b === void 0 ? 0 : _b, elemProps = __rest(props, ["variant", "count"]);
    var formattedCount = count < 1000 ? "" + count : '999+';
    return (React.createElement(Container, __assign({ variant: variant }, elemProps), formattedCount));
};
export default CountBadge;
var templateObject_1;
