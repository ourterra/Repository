var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import styled from '@emotion/styled';
import { TEXT_BORDER_RADIUS } from './utils';
import canvas from '@workday/canvas-kit-react-core';
var TextContainer = styled('div')({
    marginBottom: canvas.spacing.m,
});
var Line = styled('div')(function (_a) {
    var width = _a.width, height = _a.height, borderRadius = _a.borderRadius, backgroundColor = _a.backgroundColor;
    return {
        width: width,
        height: height,
        borderRadius: borderRadius,
        backgroundColor: backgroundColor,
        marginBottom: canvas.spacing.xs,
    };
});
var SkeletonText = (function (_super) {
    __extends(SkeletonText, _super);
    function SkeletonText() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createTextLines = function (lineCount) {
            var lines = [];
            var lineProps = {
                backgroundColor: canvas.colors.soap200,
                borderRadius: TEXT_BORDER_RADIUS,
                height: '21px',
                width: '100%',
            };
            for (var i = 0; i < lineCount; i++) {
                lines.push(React.createElement(Line, __assign({ key: i }, lineProps, { width: lineCount === 1 || i + 1 !== lineCount ? '100%' : '60%' })));
            }
            return lines;
        };
        return _this;
    }
    SkeletonText.prototype.render = function () {
        var _a = this.props, _b = _a.lineCount, lineCount = _b === void 0 ? 2 : _b, elemProps = __rest(_a, ["lineCount"]);
        if (lineCount <= 0) {
            return null;
        }
        return React.createElement(TextContainer, __assign({}, elemProps), this.createTextLines(lineCount));
    };
    return SkeletonText;
}(React.Component));
export default SkeletonText;
