"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var v4_1 = __importDefault(require("uuid/v4"));
var canvas_kit_react_popup_1 = require("@workday/canvas-kit-react-popup");
var useIntentTimer = function (fn, waitMs) {
    if (waitMs === void 0) { waitMs = 0; }
    var timer = React.useRef();
    var start = function () {
        timer.current = window.setTimeout(fn, waitMs);
    };
    var clear = function () {
        window.clearTimeout(timer.current);
        timer.current = undefined;
    };
    React.useEffect(function () {
        return function () {
            window.clearTimeout(timer.current);
        };
    }, [timer]);
    return {
        start: start,
        clear: clear,
    };
};
function useTooltip(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.type, type = _c === void 0 ? 'label' : _c, _d = _b.titleText, titleText = _d === void 0 ? '' : _d;
    var _e = React.useState(false), isOpen = _e[0], setOpen = _e[1];
    var _f = React.useState(null), anchorElement = _f[0], setAnchorElement = _f[1];
    var id = React.useState(function () { return v4_1.default(); })[0];
    var ref = React.useRef(null);
    var closeTooltip = function () {
        setOpen(false);
    };
    var intentTimer = useIntentTimer(closeTooltip, 100);
    var onOpen = function () {
        setOpen(true);
        intentTimer.clear();
    };
    var onOpenFromTarget = function (event) {
        setAnchorElement(event.currentTarget);
        onOpen();
    };
    canvas_kit_react_popup_1.useCloseOnEscape(ref, closeTooltip);
    return {
        targetProps: {
            'aria-describedby': type === 'describe' && isOpen ? id : undefined,
            'aria-label': type === 'label' ? titleText : undefined,
            onMouseEnter: onOpenFromTarget,
            onMouseLeave: intentTimer.start,
            onMouseDown: closeTooltip,
            onFocus: onOpenFromTarget,
            onBlur: intentTimer.start,
        },
        popperProps: {
            open: isOpen,
            anchorElement: anchorElement,
            ref: ref,
        },
        tooltipProps: {
            id: type === 'describe' && isOpen ? id : undefined,
            role: 'tooltip',
            onMouseEnter: onOpen,
            onMouseLeave: intentTimer.start,
        },
    };
}
exports.useTooltip = useTooltip;
