var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import innerText from 'react-innertext';
import { getTransformFromPlacement, Popper } from '@workday/canvas-kit-react-popup';
import { mergeCallback } from '@workday/canvas-kit-react-common';
import { TooltipContainer } from './TooltipContainer';
import { useTooltip } from './useTooltip';
function mergeCallbacks(elemProps, componentProps, keys) {
    if (keys === void 0) { keys = Object.keys(componentProps); }
    return keys.reduce(function (mergedProps, key) {
        if (typeof elemProps[key] === 'function') {
            mergedProps[key] = mergeCallback(componentProps[key], elemProps[key]);
        }
        else {
            mergedProps[key] = componentProps[key];
        }
        return mergedProps;
    }, {});
}
export var Tooltip = function (_a) {
    var _b = _a.type, type = _b === void 0 ? 'label' : _b, _c = _a.placement, placement = _c === void 0 ? 'top' : _c, title = _a.title, children = _a.children, elemProps = __rest(_a, ["type", "placement", "title", "children"]);
    var titleText = innerText(title);
    var _d = useTooltip({ type: type, titleText: titleText }), targetProps = _d.targetProps, popperProps = _d.popperProps, tooltipProps = _d.tooltipProps;
    return (React.createElement(React.Fragment, null,
        React.cloneElement(children, __assign(__assign({}, targetProps), mergeCallbacks(children.props, targetProps))),
        React.createElement(Popper, __assign({ placement: placement }, popperProps), function (_a) {
            var placement = _a.placement;
            var transformOrigin = getTransformFromPlacement(placement);
            return (React.createElement(TooltipContainer, __assign({ transformOrigin: transformOrigin }, elemProps, tooltipProps), title));
        })));
};
