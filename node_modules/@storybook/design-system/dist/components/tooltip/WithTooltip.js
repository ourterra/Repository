"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactPopperTooltip = _interopRequireDefault(require("react-popper-tooltip"));

var _uuid = _interopRequireDefault(require("uuid"));

var _Tooltip = require("./Tooltip");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  background: transparent;\n  border: 0;\n  cursor: ", ";\n  display: inline-block;\n  font-size: inherit;\n  font-weight: inherit;\n  margin: 0;\n  padding: 0;\n  text-align: inherit;\n  text-decoration: none;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

// A target that doesn't speak popper
var ButtonContainer = _styledComponents["default"].button(_templateObject(), function (props) {
  return props.trigger === 'hover' ? 'default' : 'pointer';
});

var isDescendantOfAction = function isDescendantOfAction(element) {
  var parentElement = element.parentElement;

  if (parentElement.tagName === 'BODY') {
    return false;
  }

  if (parentElement.tagName === 'A' || parentElement.tagName === 'BUTTON') {
    return true;
  }

  return isDescendantOfAction(parentElement);
};

var AsComponent = /*#__PURE__*/_react["default"].forwardRef(function (_ref, ref) {
  var tagName = _ref.tagName,
      onClick = _ref.onClick,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["tagName", "onClick", "onMouseEnter", "onMouseLeave"]);
  var Component = tagName || ButtonContainer;

  var asProps = _objectSpread({
    ref: ref,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onMouseEnter,
    onBlur: onMouseLeave,
    role: 'button'
  }, props);

  var onKeyDown = (0, _react.useMemo)(function () {
    return function (event) {
      if (!onClick) {
        return;
      }

      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        onClick(event);
      }
    };
  }, [onClick]); // for non button component, we need to simulate the same behavior as a button

  if (tagName) {
    asProps.tabIndex = 0;
    asProps.onKeyDown = onKeyDown;
  }

  return /*#__PURE__*/_react["default"].createElement(Component, asProps);
});

AsComponent.propTypes = {
  tagName: _propTypes["default"].string,
  onClick: _propTypes["default"].func,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func
};
AsComponent.defaultProps = {
  tagName: undefined,
  onClick: undefined,
  onMouseEnter: undefined,
  onMouseLeave: undefined
};

function WithTooltip(_ref2) {
  var tagName = _ref2.tagName,
      trigger = _ref2.trigger,
      closeOnClick = _ref2.closeOnClick,
      placement = _ref2.placement,
      modifiers = _ref2.modifiers,
      hasChrome = _ref2.hasChrome,
      _tooltip = _ref2.tooltip,
      children = _ref2.children,
      startOpen = _ref2.startOpen,
      delayHide = _ref2.delayHide,
      props = (0, _objectWithoutProperties2["default"])(_ref2, ["tagName", "trigger", "closeOnClick", "placement", "modifiers", "hasChrome", "tooltip", "children", "startOpen", "delayHide"]);

  var id = _react["default"].useMemo(function () {
    return _uuid["default"].v4();
  }, []);

  var _useState = (0, _react.useState)(startOpen),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isTooltipShown = _useState2[0],
      setTooltipShown = _useState2[1];

  var closeTooltip = (0, _react.useMemo)(function () {
    return function () {
      return setTooltipShown(false);
    };
  }, [setTooltipShown]);
  var closeTooltipOnClick = (0, _react.useMemo)(function () {
    return function (event) {
      if (!closeOnClick || !isDescendantOfAction(event.target)) {
        return;
      }

      closeTooltip();
    };
  }, [closeOnClick, closeTooltip]);
  /* eslint-env browser */

  var portalContainer = typeof window !== 'undefined' ? document.getElementById('root') || document.body : undefined;
  return /*#__PURE__*/_react["default"].createElement(_reactPopperTooltip["default"], {
    delayHide: delayHide,
    placement: placement,
    trigger: trigger,
    tooltipShown: isTooltipShown,
    onVisibilityChange: setTooltipShown,
    modifiers: modifiers,
    portalContainer: portalContainer,
    tooltip: function tooltip(_ref3) {
      var getTooltipProps = _ref3.getTooltipProps,
          getArrowProps = _ref3.getArrowProps,
          tooltipRef = _ref3.tooltipRef,
          arrowRef = _ref3.arrowRef,
          tooltipPlacement = _ref3.placement;
      return /*#__PURE__*/_react["default"].createElement(_Tooltip.Tooltip, (0, _extends2["default"])({
        hasChrome: hasChrome,
        placement: tooltipPlacement,
        tooltipRef: tooltipRef,
        arrowRef: arrowRef,
        arrowProps: getArrowProps(),
        onClick: closeTooltipOnClick
      }, getTooltipProps(), {
        id: id,
        role: "tooltip"
      }), typeof _tooltip === 'function' ? _tooltip({
        onHide: closeTooltip
      }) : _tooltip);
    }
  }, function (_ref4) {
    var getTriggerProps = _ref4.getTriggerProps,
        triggerRef = _ref4.triggerRef;
    return /*#__PURE__*/_react["default"].createElement(AsComponent, (0, _extends2["default"])({
      tagName: tagName,
      trigger: trigger,
      ref: triggerRef
    }, getTriggerProps(), props, {
      "aria-controls": id,
      "aria-describedby": isTooltipShown ? id : undefined
    }), children);
  });
}

WithTooltip.propTypes = {
  tagName: _propTypes["default"].string,
  trigger: _propTypes["default"].string,
  closeOnClick: _propTypes["default"].bool,
  placement: _propTypes["default"].string,
  modifiers: _propTypes["default"].shape({}),
  hasChrome: _propTypes["default"].bool,
  tooltip: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]).isRequired,
  children: _propTypes["default"].node.isRequired,
  startOpen: _propTypes["default"].bool,
  delayHide: _propTypes["default"].number
};
WithTooltip.defaultProps = {
  tagName: undefined,
  trigger: 'hover',
  closeOnClick: false,
  placement: 'top',
  modifiers: {},
  hasChrome: true,
  startOpen: false,
  delayHide: 100
};
var _default = WithTooltip;
exports["default"] = _default;