"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Clipboard = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _TooltipNote = require("./tooltip/TooltipNote");

var _WithTooltip = _interopRequireDefault(require("./tooltip/WithTooltip"));

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  cursor: pointer;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var Tooltip = (0, _styledComponents["default"])(_WithTooltip["default"])(_templateObject());

var Clipboard = function Clipboard(_ref) {
  var children = _ref.children,
      toCopy = _ref.toCopy,
      getCopyContent = _ref.getCopyContent,
      copyOptions = _ref.copyOptions,
      resetTimeout = _ref.resetTimeout,
      renderCopiedTooltip = _ref.renderCopiedTooltip,
      renderUncopiedTooltip = _ref.renderUncopiedTooltip,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "toCopy", "getCopyContent", "copyOptions", "resetTimeout", "renderCopiedTooltip", "renderUncopiedTooltip"]);
  var timeout = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      copied = _useState2[0],
      setCopied = _useState2[1];

  (0, _react.useEffect)(function () {
    if (copied && timeout.current) {
      clearTimeout(timeout.current);
    }

    if (copied && resetTimeout) {
      timeout.current = setTimeout(function () {
        return setCopied(false);
      }, resetTimeout);
    }

    return function () {
      clearTimeout(timeout.current);
    };
  }, [copied]);

  var copy = function copy() {
    if ((0, _copyToClipboard["default"])(toCopy || getCopyContent(), copyOptions)) {
      setCopied(true);
    }
  };

  return /*#__PURE__*/_react["default"].createElement(Tooltip, (0, _extends2["default"])({
    onClick: copy,
    hasChrome: false,
    tooltip: copied ? renderCopiedTooltip : renderUncopiedTooltip
  }, props), typeof children === 'function' ? children(copied) : children);
};

exports.Clipboard = Clipboard;
Clipboard.propTypes = {
  children: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]).isRequired,
  toCopy: _propTypes["default"].string,
  getCopyContent: _propTypes["default"].func,
  copyOptions: _propTypes["default"].object,
  // eslint-disable-line
  renderCopiedTooltip: _propTypes["default"].func,
  renderUncopiedTooltip: _propTypes["default"].func,
  resetTimeout: _propTypes["default"].number
};
Clipboard.defaultProps = {
  copyOptions: undefined,
  renderCopiedTooltip: function renderCopiedTooltip() {
    return null;
  },
  renderUncopiedTooltip: function renderUncopiedTooltip() {
    return null;
  },
  resetTimeout: 3000,
  toCopy: undefined,
  getCopyContent: function getCopyContent() {
    return undefined;
  }
};